// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package pdp_10dec2018.issuerpushtociamchildjob_0_1;

import routines.Helper;
import routines.Response;
import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.ServerErrorCode;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaFlex_3
	//import java.util.List;
import java.util.HashMap;
import routines.system.JSONArray;
import routines.system.JSONObject;

	//the import part of tJavaFlex_4
	//import java.util.List;
import java.util.HashMap;
import routines.system.JSONArray;
import routines.system.JSONObject;

	//the import part of tJavaFlex_1
	//import java.util.List;
import java.util.HashMap;
import routines.system.JSONArray;
import routines.system.JSONObject;

	//the import part of tJavaRow_1
	//import java.util.List;
import routines.system.JSONArray;
import routines.system.JSONObject;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: issuerPushToCiamChildJob Purpose: <br>
 * Description:  <br>
 * @author pulkittestmail@gmail.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class issuerPushToCiamChildJob implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(parentId != null){
				
					this.setProperty("parentId", parentId.toString());
				
			}
			
			if(id != null){
				
					this.setProperty("id", id.toString());
				
			}
			
			if(source != null){
				
					this.setProperty("source", source.toString());
				
			}
			
			if(type != null){
				
					this.setProperty("type", type.toString());
				
			}
			
			if(legacy_id != null){
				
					this.setProperty("legacy_id", legacy_id.toString());
				
			}
			
			if(issuer_name != null){
				
					this.setProperty("issuer_name", issuer_name.toString());
				
			}
			
			if(issuer_type != null){
				
					this.setProperty("issuer_type", issuer_type.toString());
				
			}
			
			if(generalLogDirectory != null){
				
					this.setProperty("generalLogDirectory", generalLogDirectory.toString());
				
			}
			
			if(componentLogDirectory != null){
				
					this.setProperty("componentLogDirectory", componentLogDirectory.toString());
				
			}
			
			if(logDirectory != null){
				
					this.setProperty("logDirectory", logDirectory.toString());
				
			}
			
			if(enableLog != null){
				
					this.setProperty("enableLog", enableLog.toString());
				
			}
			
			if(ciamServerError != null){
				
					this.setProperty("ciamServerError", ciamServerError.toString());
				
			}
			
			if(failureStatus != null){
				
					this.setProperty("failureStatus", failureStatus.toString());
				
			}
			
			if(successStatus != null){
				
					this.setProperty("successStatus", successStatus.toString());
				
			}
			
			if(mysql_port != null){
				
					this.setProperty("mysql_port", mysql_port.toString());
				
			}
			
			if(mysql_host != null){
				
					this.setProperty("mysql_host", mysql_host.toString());
				
			}
			
			if(mysql_user != null){
				
					this.setProperty("mysql_user", mysql_user.toString());
				
			}
			
			if(mysql_password != null){
				
					this.setProperty("mysql_password", mysql_password.toString());
				
			}
			
			if(mysql_database != null){
				
					this.setProperty("mysql_database", mysql_database.toString());
				
			}
			
			if(ciamApiSetMasterChild != null){
				
					this.setProperty("ciamApiSetMasterChild", ciamApiSetMasterChild.toString());
				
			}
			
			if(ciamApiKey != null){
				
					this.setProperty("ciamApiKey", ciamApiKey.toString());
				
			}
			
			if(ciamApiGetCityById != null){
				
					this.setProperty("ciamApiGetCityById", ciamApiGetCityById.toString());
				
			}
			
			if(ciamApiUpdateCollection != null){
				
					this.setProperty("ciamApiUpdateCollection", ciamApiUpdateCollection.toString());
				
			}
			
			if(ciamApiGetOptinServicesList != null){
				
					this.setProperty("ciamApiGetOptinServicesList", ciamApiGetOptinServicesList.toString());
				
			}
			
			if(ciamApiGetStateListByCountry != null){
				
					this.setProperty("ciamApiGetStateListByCountry", ciamApiGetStateListByCountry.toString());
				
			}
			
			if(ciamApiUploadSignature != null){
				
					this.setProperty("ciamApiUploadSignature", ciamApiUploadSignature.toString());
				
			}
			
			if(ciamApiTermCondition != null){
				
					this.setProperty("ciamApiTermCondition", ciamApiTermCondition.toString());
				
			}
			
			if(ciamApiSaveOptinService != null){
				
					this.setProperty("ciamApiSaveOptinService", ciamApiSaveOptinService.toString());
				
			}
			
			if(ciamApiLoginCustomer != null){
				
					this.setProperty("ciamApiLoginCustomer", ciamApiLoginCustomer.toString());
				
			}
			
			if(ciamApiGetCountryList != null){
				
					this.setProperty("ciamApiGetCountryList", ciamApiGetCountryList.toString());
				
			}
			
			if(ciamApisuffix != null){
				
					this.setProperty("ciamApisuffix", ciamApisuffix.toString());
				
			}
			
			if(ciamApiPushCustomer != null){
				
					this.setProperty("ciamApiPushCustomer", ciamApiPushCustomer.toString());
				
			}
			
			if(ciamApiBaseUrl != null){
				
					this.setProperty("ciamApiBaseUrl", ciamApiBaseUrl.toString());
				
			}
			
			if(ciamApiGetStateById != null){
				
					this.setProperty("ciamApiGetStateById", ciamApiGetStateById.toString());
				
			}
			
			if(ciamApiGetCustomer != null){
				
					this.setProperty("ciamApiGetCustomer", ciamApiGetCustomer.toString());
				
			}
			
			if(ciamApiGetDocument != null){
				
					this.setProperty("ciamApiGetDocument", ciamApiGetDocument.toString());
				
			}
			
			if(ciamApiSendOtp != null){
				
					this.setProperty("ciamApiSendOtp", ciamApiSendOtp.toString());
				
			}
			
			if(ciamApiGetIssuer != null){
				
					this.setProperty("ciamApiGetIssuer", ciamApiGetIssuer.toString());
				
			}
			
			if(ciamApiRegisterIssuer != null){
				
					this.setProperty("ciamApiRegisterIssuer", ciamApiRegisterIssuer.toString());
				
			}
			
			if(ciamApiRealTime != null){
				
					this.setProperty("ciamApiRealTime", ciamApiRealTime.toString());
				
			}
			
			if(ciamApiGetCityListByState != null){
				
					this.setProperty("ciamApiGetCityListByState", ciamApiGetCityListByState.toString());
				
			}
			
			if(ciamApiGetCountryById != null){
				
					this.setProperty("ciamApiGetCountryById", ciamApiGetCountryById.toString());
				
			}
			
			if(ciamApiRegisterCustomer != null){
				
					this.setProperty("ciamApiRegisterCustomer", ciamApiRegisterCustomer.toString());
				
			}
			
			if(oFacScanApiKey != null){
				
					this.setProperty("oFacScanApiKey", oFacScanApiKey.toString());
				
			}
			
			if(ciamApiVerifyOtp != null){
				
					this.setProperty("ciamApiVerifyOtp", ciamApiVerifyOtp.toString());
				
			}
			
			if(ciamApiSearchCustomer != null){
				
					this.setProperty("ciamApiSearchCustomer", ciamApiSearchCustomer.toString());
				
			}
			
			if(oFacScanUrl != null){
				
					this.setProperty("oFacScanUrl", oFacScanUrl.toString());
				
			}
			
			if(ciamApiUploadAssets != null){
				
					this.setProperty("ciamApiUploadAssets", ciamApiUploadAssets.toString());
				
			}
			
			if(ciamApiSearchCustomerOnCiam != null){
				
					this.setProperty("ciamApiSearchCustomerOnCiam", ciamApiSearchCustomerOnCiam.toString());
				
			}
			
			if(ciamApiLoadGroupADataInCiam != null){
				
					this.setProperty("ciamApiLoadGroupADataInCiam", ciamApiLoadGroupADataInCiam.toString());
				
			}
			
			if(talendBaseUrl != null){
				
					this.setProperty("talendBaseUrl", talendBaseUrl.toString());
				
			}
			
			if(dataDirectory != null){
				
					this.setProperty("dataDirectory", dataDirectory.toString());
				
			}
			
			if(inValidRequestJsonError != null){
				
					this.setProperty("inValidRequestJsonError", inValidRequestJsonError.toString());
				
			}
			
			if(inValidResponseJsonError != null){
				
					this.setProperty("inValidResponseJsonError", inValidResponseJsonError.toString());
				
			}
			
		}

public Integer parentId;
public Integer getParentId(){
	return this.parentId;
}
public Integer id;
public Integer getId(){
	return this.id;
}
public String source;
public String getSource(){
	return this.source;
}
public String type;
public String getType(){
	return this.type;
}
public String legacy_id;
public String getLegacy_id(){
	return this.legacy_id;
}
public String issuer_name;
public String getIssuer_name(){
	return this.issuer_name;
}
public String issuer_type;
public String getIssuer_type(){
	return this.issuer_type;
}
public String generalLogDirectory;
public String getGeneralLogDirectory(){
	return this.generalLogDirectory;
}
public String componentLogDirectory;
public String getComponentLogDirectory(){
	return this.componentLogDirectory;
}
public String logDirectory;
public String getLogDirectory(){
	return this.logDirectory;
}
public String enableLog;
public String getEnableLog(){
	return this.enableLog;
}
public String ciamServerError;
public String getCiamServerError(){
	return this.ciamServerError;
}
public Boolean failureStatus;
public Boolean getFailureStatus(){
	return this.failureStatus;
}
public Boolean successStatus;
public Boolean getSuccessStatus(){
	return this.successStatus;
}
public String mysql_port;
public String getMysql_port(){
	return this.mysql_port;
}
public String mysql_host;
public String getMysql_host(){
	return this.mysql_host;
}
public String mysql_user;
public String getMysql_user(){
	return this.mysql_user;
}
public String mysql_password;
public String getMysql_password(){
	return this.mysql_password;
}
public String mysql_database;
public String getMysql_database(){
	return this.mysql_database;
}
public String ciamApiSetMasterChild;
public String getCiamApiSetMasterChild(){
	return this.ciamApiSetMasterChild;
}
public String ciamApiKey;
public String getCiamApiKey(){
	return this.ciamApiKey;
}
public String ciamApiGetCityById;
public String getCiamApiGetCityById(){
	return this.ciamApiGetCityById;
}
public String ciamApiUpdateCollection;
public String getCiamApiUpdateCollection(){
	return this.ciamApiUpdateCollection;
}
public String ciamApiGetOptinServicesList;
public String getCiamApiGetOptinServicesList(){
	return this.ciamApiGetOptinServicesList;
}
public String ciamApiGetStateListByCountry;
public String getCiamApiGetStateListByCountry(){
	return this.ciamApiGetStateListByCountry;
}
public String ciamApiUploadSignature;
public String getCiamApiUploadSignature(){
	return this.ciamApiUploadSignature;
}
public String ciamApiTermCondition;
public String getCiamApiTermCondition(){
	return this.ciamApiTermCondition;
}
public String ciamApiSaveOptinService;
public String getCiamApiSaveOptinService(){
	return this.ciamApiSaveOptinService;
}
public String ciamApiLoginCustomer;
public String getCiamApiLoginCustomer(){
	return this.ciamApiLoginCustomer;
}
public String ciamApiGetCountryList;
public String getCiamApiGetCountryList(){
	return this.ciamApiGetCountryList;
}
public String ciamApisuffix;
public String getCiamApisuffix(){
	return this.ciamApisuffix;
}
public String ciamApiPushCustomer;
public String getCiamApiPushCustomer(){
	return this.ciamApiPushCustomer;
}
public String ciamApiBaseUrl;
public String getCiamApiBaseUrl(){
	return this.ciamApiBaseUrl;
}
public String ciamApiGetStateById;
public String getCiamApiGetStateById(){
	return this.ciamApiGetStateById;
}
public String ciamApiGetCustomer;
public String getCiamApiGetCustomer(){
	return this.ciamApiGetCustomer;
}
public String ciamApiGetDocument;
public String getCiamApiGetDocument(){
	return this.ciamApiGetDocument;
}
public String ciamApiSendOtp;
public String getCiamApiSendOtp(){
	return this.ciamApiSendOtp;
}
public String ciamApiGetIssuer;
public String getCiamApiGetIssuer(){
	return this.ciamApiGetIssuer;
}
public String ciamApiRegisterIssuer;
public String getCiamApiRegisterIssuer(){
	return this.ciamApiRegisterIssuer;
}
public String ciamApiRealTime;
public String getCiamApiRealTime(){
	return this.ciamApiRealTime;
}
public String ciamApiGetCityListByState;
public String getCiamApiGetCityListByState(){
	return this.ciamApiGetCityListByState;
}
public String ciamApiGetCountryById;
public String getCiamApiGetCountryById(){
	return this.ciamApiGetCountryById;
}
public String ciamApiRegisterCustomer;
public String getCiamApiRegisterCustomer(){
	return this.ciamApiRegisterCustomer;
}
public String oFacScanApiKey;
public String getOFacScanApiKey(){
	return this.oFacScanApiKey;
}
public String ciamApiVerifyOtp;
public String getCiamApiVerifyOtp(){
	return this.ciamApiVerifyOtp;
}
public String ciamApiSearchCustomer;
public String getCiamApiSearchCustomer(){
	return this.ciamApiSearchCustomer;
}
public String oFacScanUrl;
public String getOFacScanUrl(){
	return this.oFacScanUrl;
}
public String ciamApiUploadAssets;
public String getCiamApiUploadAssets(){
	return this.ciamApiUploadAssets;
}
public String ciamApiSearchCustomerOnCiam;
public String getCiamApiSearchCustomerOnCiam(){
	return this.ciamApiSearchCustomerOnCiam;
}
public String ciamApiLoadGroupADataInCiam;
public String getCiamApiLoadGroupADataInCiam(){
	return this.ciamApiLoadGroupADataInCiam;
}
public String talendBaseUrl;
public String getTalendBaseUrl(){
	return this.talendBaseUrl;
}
public String dataDirectory;
public String getDataDirectory(){
	return this.dataDirectory;
}
public String inValidRequestJsonError;
public String getInValidRequestJsonError(){
	return this.inValidRequestJsonError;
}
public String inValidResponseJsonError;
public String getInValidResponseJsonError(){
	return this.inValidResponseJsonError;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "issuerPushToCiamChildJob";
	private final String projectName = "PDP_10DEC2018";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				issuerPushToCiamChildJob.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(issuerPushToCiamChildJob.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void Implicit_Context_Regex_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							Implicit_Context_Context_error(exception, errorComponent, globalMap);
						
						}
					
			public void Implicit_Context_Context_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					Implicit_Context_Regex_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTClient_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tFixedFlowInput_4Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBLastInsertId_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void Implicit_Context_Regex_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		









public static class row_Implicit_Context_RegexStruct implements routines.system.IPersistableRow<row_Implicit_Context_RegexStruct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_Implicit_Context_RegexStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void Implicit_Context_RegexProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_Implicit_Context_RegexStruct row_Implicit_Context_Regex = new row_Implicit_Context_RegexStruct();




	
	/**
	 * [Implicit_Context_Context begin ] start
	 */

	

	
		
		ok_Hash.put("Implicit_Context_Context", false);
		start_Hash.put("Implicit_Context_Context", System.currentTimeMillis());
		
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Main" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_Implicit_Context_Context = 0;
		
    	class BytesLimit65535_Implicit_Context_Context{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_Implicit_Context_Context().limitLog4jByte();
	java.util.List<String> assignList_Implicit_Context_Context = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_Implicit_Context_Context = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_Implicit_Context_Context = new java.util.ArrayList<String>();
	int nb_line_Implicit_Context_Context = 0;

 



/**
 * [Implicit_Context_Context begin ] stop
 */



	
	/**
	 * [Implicit_Context_Regex begin ] start
	 */

	

	
		
		ok_Hash.put("Implicit_Context_Regex", false);
		start_Hash.put("Implicit_Context_Regex", System.currentTimeMillis());
		
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	
		int tos_count_Implicit_Context_Regex = 0;
		
    	class BytesLimit65535_Implicit_Context_Regex{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_Implicit_Context_Regex().limitLog4jByte();

	
	
		int nb_line_Implicit_Context_Regex = 0;
        
        int footer_Implicit_Context_Regex  = 0;
        boolean removeEmptyRowImplicit_Context_Regex = true;
        Object source_Implicit_Context_Regex = /** Start field Implicit_Context_Regex:FILENAME */"/esb/context/context.cfg"/** End field Implicit_Context_Regex:FILENAME */;
        
        org.talend.fileprocess.TOSDelimitedReader inImplicit_Context_Regex=null;
        if(source_Implicit_Context_Regex instanceof String || source_Implicit_Context_Regex instanceof java.io.InputStream){
        	inImplicit_Context_Regex = new org.talend.fileprocess.TOSDelimitedReader(/** Start field Implicit_Context_Regex:FILENAME */"/esb/context/context.cfg"/** End field Implicit_Context_Regex:FILENAME */, "ISO-8859-15", "", "\n", removeEmptyRowImplicit_Context_Regex);
        }else{
        	throw new java.lang.Exception("The source data should be specified as File Path or InputStream or java.io.Reader!");
        }
        String strImplicit_Context_Regex;
        int totalLineImplicit_Context_Regex=0,currentLineImplicit_Context_Regex=0,beginLineImplicit_Context_Regex=0,lastLineImplicit_Context_Regex=-1,validRowCountImplicit_Context_Regex=0;
        int limitImplicit_Context_Regex=-1;
        
		int headerImplicit_Context_Regex = 0;
		if(headerImplicit_Context_Regex > 0){
			beginLineImplicit_Context_Regex=headerImplicit_Context_Regex+1;
		}
    	
        if(footer_Implicit_Context_Regex > 0){
			while (inImplicit_Context_Regex.readRecord()) {
                strImplicit_Context_Regex =inImplicit_Context_Regex.getRowRecord();        
				totalLineImplicit_Context_Regex++;
			}
			int lastLineTempImplicit_Context_Regex = totalLineImplicit_Context_Regex - footer_Implicit_Context_Regex   < 0? 0 : totalLineImplicit_Context_Regex - footer_Implicit_Context_Regex ;
			if(lastLineImplicit_Context_Regex > 0){
				lastLineImplicit_Context_Regex = lastLineImplicit_Context_Regex < lastLineTempImplicit_Context_Regex ? lastLineImplicit_Context_Regex : lastLineTempImplicit_Context_Regex; 
			}else {
				lastLineImplicit_Context_Regex = lastLineTempImplicit_Context_Regex;
			}
		  	inImplicit_Context_Regex.close();
        	inImplicit_Context_Regex = new org.talend.fileprocess.TOSDelimitedReader(/** Start field Implicit_Context_Regex:FILENAME */"/esb/context/context.cfg"/** End field Implicit_Context_Regex:FILENAME */, "ISO-8859-15", "", "\n", removeEmptyRowImplicit_Context_Regex);
		}
        java.util.StringTokenizer strTokenImplicit_Context_Regex;
        java.util.regex.Pattern patternImplicit_Context_Regex = java.util.regex.Pattern.compile("^([^"+":="+"]*)"+":="+"(.*)$");
        java.util.regex.Matcher matcherImplicit_Context_Regex = null;
        
        
        while (inImplicit_Context_Regex.readRecord()) {
            strImplicit_Context_Regex =inImplicit_Context_Regex.getRowRecord(); 
        	
       		currentLineImplicit_Context_Regex++;
        	if(currentLineImplicit_Context_Regex < beginLineImplicit_Context_Regex) {
        		continue;
        	}
        	if(lastLineImplicit_Context_Regex > -1 && currentLineImplicit_Context_Regex > lastLineImplicit_Context_Regex) {
        		break;
        	}
        	if(removeEmptyRowImplicit_Context_Regex && ("").equals(strImplicit_Context_Regex)){
        		continue;
        	}
        	if(limitImplicit_Context_Regex!=-1&& validRowCountImplicit_Context_Regex >= limitImplicit_Context_Regex){
        		break;
        	}
        	
        	matcherImplicit_Context_Regex = patternImplicit_Context_Regex.matcher(strImplicit_Context_Regex);
        	int groupCountImplicit_Context_Regex = 0;
        	boolean isMatchImplicit_Context_Regex = matcherImplicit_Context_Regex.find(); 
        	if(isMatchImplicit_Context_Regex){
        	groupCountImplicit_Context_Regex=matcherImplicit_Context_Regex.groupCount();
			}
    		row_Implicit_Context_Regex = null;						
			
			boolean lineIsEmptyImplicit_Context_Regex = strImplicit_Context_Regex.length() == 0;
			
			String[] valueImplicit_Context_Regex = new String[2];
			String frontCharImplicit_Context_Regex,behindCharImplicit_Context_Regex;
			for(int i=0;i<2;i++){
				valueImplicit_Context_Regex[i] = "";
				if(lineIsEmptyImplicit_Context_Regex){
					continue;
				}
				if(i < groupCountImplicit_Context_Regex){
					valueImplicit_Context_Regex[i] = matcherImplicit_Context_Regex.group(i+1);
				}
			}
			validRowCountImplicit_Context_Regex++;
			
			boolean whetherReject_Implicit_Context_Regex = false;
			row_Implicit_Context_Regex = new row_Implicit_Context_RegexStruct();
			try {			
			if(!isMatchImplicit_Context_Regex){//line data not matched with given regex parameter
        		throw new java.lang.Exception("Line doesn't match: " + strImplicit_Context_Regex);
        	}
								
						if(valueImplicit_Context_Regex[0]!=null && valueImplicit_Context_Regex[0].length() > 0) {
							row_Implicit_Context_Regex.key = valueImplicit_Context_Regex[0];					
						} else {
						row_Implicit_Context_Regex.key = "";}
						
						if(valueImplicit_Context_Regex[1]!=null && valueImplicit_Context_Regex[1].length() > 0) {
							row_Implicit_Context_Regex.value = valueImplicit_Context_Regex[1];					
						} else {
						row_Implicit_Context_Regex.value = "";}
	
										
					
    } catch (java.lang.Exception e) {
        whetherReject_Implicit_Context_Regex = true;
                    	if(isMatchImplicit_Context_Regex){
                    		System.err.println(e.getMessage());
                    	}
                row_Implicit_Context_Regex = null;
    }					
					
					
			
			nb_line_Implicit_Context_Regex++;

 



/**
 * [Implicit_Context_Regex begin ] stop
 */
	
	/**
	 * [Implicit_Context_Regex main ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 


	tos_count_Implicit_Context_Regex++;

/**
 * [Implicit_Context_Regex main ] stop
 */
	
	/**
	 * [Implicit_Context_Regex process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 



/**
 * [Implicit_Context_Regex process_data_begin ] stop
 */
// Start of branch "row_Implicit_Context_Regex"
if(row_Implicit_Context_Regex != null) { 



	
	/**
	 * [Implicit_Context_Context main ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

			//Main
			//row_Implicit_Context_Regex


			
				if(execStat){
					runStat.updateStatOnConnection("Main"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_Implicit_Context_Context = null;
                    String key_Implicit_Context_Context = null;
                      if (row_Implicit_Context_Regex.key != null){
                          tmp_key_Implicit_Context_Context = row_Implicit_Context_Regex.key.trim();
                        if ((tmp_key_Implicit_Context_Context.startsWith("#") || tmp_key_Implicit_Context_Context.startsWith("!") )){
                          tmp_key_Implicit_Context_Context = null;
                        } else {
                          row_Implicit_Context_Regex.key = tmp_key_Implicit_Context_Context;
                        }
                      }
                        if(row_Implicit_Context_Regex.key != null) {
                    key_Implicit_Context_Context =
                        row_Implicit_Context_Regex.key;
                        }
                    String value_Implicit_Context_Context = null;
                        if(row_Implicit_Context_Regex.value != null) {
                    value_Implicit_Context_Context =
                        row_Implicit_Context_Regex.value;
                        }
				
				String currentValue_Implicit_Context_Context = value_Implicit_Context_Context;
				

  if (tmp_key_Implicit_Context_Context != null){
  try{
        if(key_Implicit_Context_Context!=null && "parentId".equals(key_Implicit_Context_Context))
        {

                context.parentId=Integer.parseInt(value_Implicit_Context_Context);

        }

        if(key_Implicit_Context_Context!=null && "id".equals(key_Implicit_Context_Context))
        {

                context.id=Integer.parseInt(value_Implicit_Context_Context);

        }

        if(key_Implicit_Context_Context!=null && "source".equals(key_Implicit_Context_Context))
        {
           context.source=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "type".equals(key_Implicit_Context_Context))
        {
           context.type=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "legacy_id".equals(key_Implicit_Context_Context))
        {
           context.legacy_id=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "issuer_name".equals(key_Implicit_Context_Context))
        {
           context.issuer_name=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "issuer_type".equals(key_Implicit_Context_Context))
        {
           context.issuer_type=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "generalLogDirectory".equals(key_Implicit_Context_Context))
        {
           context.generalLogDirectory=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "componentLogDirectory".equals(key_Implicit_Context_Context))
        {
           context.componentLogDirectory=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "logDirectory".equals(key_Implicit_Context_Context))
        {
           context.logDirectory=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "enableLog".equals(key_Implicit_Context_Context))
        {
           context.enableLog=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamServerError".equals(key_Implicit_Context_Context))
        {
           context.ciamServerError=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "failureStatus".equals(key_Implicit_Context_Context))
        {

               context.failureStatus=Boolean.parseBoolean(value_Implicit_Context_Context);

        }

        if(key_Implicit_Context_Context!=null && "successStatus".equals(key_Implicit_Context_Context))
        {

               context.successStatus=Boolean.parseBoolean(value_Implicit_Context_Context);

        }

        if(key_Implicit_Context_Context!=null && "mysql_port".equals(key_Implicit_Context_Context))
        {
           context.mysql_port=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "mysql_host".equals(key_Implicit_Context_Context))
        {
           context.mysql_host=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "mysql_user".equals(key_Implicit_Context_Context))
        {
           context.mysql_user=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "mysql_password".equals(key_Implicit_Context_Context))
        {
           context.mysql_password=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "mysql_database".equals(key_Implicit_Context_Context))
        {
           context.mysql_database=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiSetMasterChild".equals(key_Implicit_Context_Context))
        {
           context.ciamApiSetMasterChild=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiKey".equals(key_Implicit_Context_Context))
        {
           context.ciamApiKey=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiGetCityById".equals(key_Implicit_Context_Context))
        {
           context.ciamApiGetCityById=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiUpdateCollection".equals(key_Implicit_Context_Context))
        {
           context.ciamApiUpdateCollection=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiGetOptinServicesList".equals(key_Implicit_Context_Context))
        {
           context.ciamApiGetOptinServicesList=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiGetStateListByCountry".equals(key_Implicit_Context_Context))
        {
           context.ciamApiGetStateListByCountry=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiUploadSignature".equals(key_Implicit_Context_Context))
        {
           context.ciamApiUploadSignature=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiTermCondition".equals(key_Implicit_Context_Context))
        {
           context.ciamApiTermCondition=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiSaveOptinService".equals(key_Implicit_Context_Context))
        {
           context.ciamApiSaveOptinService=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiLoginCustomer".equals(key_Implicit_Context_Context))
        {
           context.ciamApiLoginCustomer=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiGetCountryList".equals(key_Implicit_Context_Context))
        {
           context.ciamApiGetCountryList=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApisuffix".equals(key_Implicit_Context_Context))
        {
           context.ciamApisuffix=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiPushCustomer".equals(key_Implicit_Context_Context))
        {
           context.ciamApiPushCustomer=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiBaseUrl".equals(key_Implicit_Context_Context))
        {
           context.ciamApiBaseUrl=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiGetStateById".equals(key_Implicit_Context_Context))
        {
           context.ciamApiGetStateById=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiGetCustomer".equals(key_Implicit_Context_Context))
        {
           context.ciamApiGetCustomer=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiGetDocument".equals(key_Implicit_Context_Context))
        {
           context.ciamApiGetDocument=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiSendOtp".equals(key_Implicit_Context_Context))
        {
           context.ciamApiSendOtp=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiGetIssuer".equals(key_Implicit_Context_Context))
        {
           context.ciamApiGetIssuer=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiRegisterIssuer".equals(key_Implicit_Context_Context))
        {
           context.ciamApiRegisterIssuer=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiRealTime".equals(key_Implicit_Context_Context))
        {
           context.ciamApiRealTime=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiGetCityListByState".equals(key_Implicit_Context_Context))
        {
           context.ciamApiGetCityListByState=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiGetCountryById".equals(key_Implicit_Context_Context))
        {
           context.ciamApiGetCountryById=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiRegisterCustomer".equals(key_Implicit_Context_Context))
        {
           context.ciamApiRegisterCustomer=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "oFacScanApiKey".equals(key_Implicit_Context_Context))
        {
           context.oFacScanApiKey=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiVerifyOtp".equals(key_Implicit_Context_Context))
        {
           context.ciamApiVerifyOtp=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiSearchCustomer".equals(key_Implicit_Context_Context))
        {
           context.ciamApiSearchCustomer=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "oFacScanUrl".equals(key_Implicit_Context_Context))
        {
           context.oFacScanUrl=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiUploadAssets".equals(key_Implicit_Context_Context))
        {
           context.ciamApiUploadAssets=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiSearchCustomerOnCiam".equals(key_Implicit_Context_Context))
        {
           context.ciamApiSearchCustomerOnCiam=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "ciamApiLoadGroupADataInCiam".equals(key_Implicit_Context_Context))
        {
           context.ciamApiLoadGroupADataInCiam=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "talendBaseUrl".equals(key_Implicit_Context_Context))
        {
           context.talendBaseUrl=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "dataDirectory".equals(key_Implicit_Context_Context))
        {
           context.dataDirectory=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "inValidRequestJsonError".equals(key_Implicit_Context_Context))
        {
           context.inValidRequestJsonError=value_Implicit_Context_Context;
        }

        if(key_Implicit_Context_Context!=null && "inValidResponseJsonError".equals(key_Implicit_Context_Context))
        {
           context.inValidResponseJsonError=value_Implicit_Context_Context;
        }


        if (context.getProperty(key_Implicit_Context_Context)!=null)
        {
            assignList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }else  {
            newPropertyList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }
        if(value_Implicit_Context_Context == null){
            context.setProperty(key_Implicit_Context_Context, "");
        }else{
            context.setProperty(key_Implicit_Context_Context,value_Implicit_Context_Context);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_Implicit_Context_Context + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_Implicit_Context_Context++;
    }
        //////////////////////////

 


	tos_count_Implicit_Context_Context++;

/**
 * [Implicit_Context_Context main ] stop
 */
	
	/**
	 * [Implicit_Context_Context process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context process_data_begin ] stop
 */
	
	/**
	 * [Implicit_Context_Context process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context process_data_end ] stop
 */

} // End of branch "row_Implicit_Context_Regex"




	
	/**
	 * [Implicit_Context_Regex process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 



/**
 * [Implicit_Context_Regex process_data_end ] stop
 */
	
	/**
	 * [Implicit_Context_Regex end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

	
	
    		}
			if(!(source_Implicit_Context_Regex instanceof java.io.InputStream)){
            	inImplicit_Context_Regex.close();
            }
            inImplicit_Context_Regex = null;
            globalMap.put("Implicit_Context_Regex_NB_LINE",nb_line_Implicit_Context_Regex);      
 

ok_Hash.put("Implicit_Context_Regex", true);
end_Hash.put("Implicit_Context_Regex", System.currentTimeMillis());




/**
 * [Implicit_Context_Regex end ] stop
 */

	
	/**
	 * [Implicit_Context_Context end ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	
	
	java.util.Enumeration<?> enu_Implicit_Context_Context = context.propertyNames();
    while(enu_Implicit_Context_Context.hasMoreElements())
    {           
    	String key_Implicit_Context_Context = (String)enu_Implicit_Context_Context.nextElement();
        if(!assignList_Implicit_Context_Context.contains(key_Implicit_Context_Context) && !newPropertyList_Implicit_Context_Context.contains(key_Implicit_Context_Context))
        {
            noAssignList_Implicit_Context_Context.add(key_Implicit_Context_Context);
        }          
    }
	for(Object obj_Implicit_Context_Context :noAssignList_Implicit_Context_Context){
		
		System.out.println("Warning: Parameter \"" + obj_Implicit_Context_Context + "\" has not been set by Implicit_Context_Context");
		
	} 

    String newPropertyStr_Implicit_Context_Context = newPropertyList_Implicit_Context_Context.toString();
    String newProperty_Implicit_Context_Context = newPropertyStr_Implicit_Context_Context.substring(1, newPropertyStr_Implicit_Context_Context.length() - 1);
    
    String noAssignStr_Implicit_Context_Context = noAssignList_Implicit_Context_Context.toString();
    String noAssign_Implicit_Context_Context = noAssignStr_Implicit_Context_Context.substring(1, noAssignStr_Implicit_Context_Context.length() - 1);
    
    globalMap.put("Implicit_Context_Context_KEY_NOT_INCONTEXT", newProperty_Implicit_Context_Context);
    globalMap.put("Implicit_Context_Context_KEY_NOT_LOADED", noAssign_Implicit_Context_Context);

    globalMap.put("Implicit_Context_Context_NB_LINE",nb_line_Implicit_Context_Context);

	List<String> parametersToEncrypt_Implicit_Context_Context = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:Implicit_Context_Context", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_Implicit_Context_Context));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Main"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("Implicit_Context_Context", true);
end_Hash.put("Implicit_Context_Context", System.currentTimeMillis());




/**
 * [Implicit_Context_Context end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [Implicit_Context_Regex finally ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Regex";
	
	currentComponent="Implicit_Context_Regex";

	

 



/**
 * [Implicit_Context_Regex finally ] stop
 */

	
	/**
	 * [Implicit_Context_Context finally ] start
	 */

	

	
	
		currentVirtualComponent = "Implicit_Context_Context";
	
	currentComponent="Implicit_Context_Context";

	

 



/**
 * [Implicit_Context_Context finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String source;

				public String getSource () {
					return this.source;
				}
				
			    public String legacy_id;

				public String getLegacy_id () {
					return this.legacy_id;
				}
				
			    public String phone_type;

				public String getPhone_type () {
					return this.phone_type;
				}
				
			    public String phone_number;

				public String getPhone_number () {
					return this.phone_number;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.id = this.id;
	            other.source = this.source;
	            other.legacy_id = this.legacy_id;
	            other.phone_type = this.phone_type;
	            other.phone_number = this.phone_number;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.source = readString(dis);
					
					this.legacy_id = readString(dis);
					
					this.phone_type = readString(dis);
					
					this.phone_number = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.source,dos);
					
					// String
				
						writeString(this.legacy_id,dos);
					
					// String
				
						writeString(this.phone_type,dos);
					
					// String
				
						writeString(this.phone_number,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",source="+source);
		sb.append(",legacy_id="+legacy_id);
		sb.append(",phone_type="+phone_type);
		sb.append(",phone_number="+phone_number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tJavaFlex_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_3", false);
		start_Hash.put("tJavaFlex_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaFlex_3 = 0;
		
    	class BytesLimit65535_tJavaFlex_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_3().limitLog4jByte();


// start part of your Java code
JSONArray phoneArray = new JSONArray();    


 



/**
 * [tJavaFlex_3 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
    	class BytesLimit65535_tDBInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_1().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
		        conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  `issuer_phones`.`id`, \n  `issuer_phones`.`source`, \n  `issuer_phones`.`legacy_id`, \n  `issuer_phones`.`phone_"
+"type`, \n  `issuer_phones`.`phone_number`\nFROM `issuer_phones` \nWHERE \n`issuer_phones`.`source`='"+context.source+"'\nAND\n`issuer_phones`.`legacy_id`='"+context.legacy_id+"'";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row2.id = 0;
							} else {
		                          
            if(rs_tDBInput_1.getObject(1) != null) {
                row2.id = rs_tDBInput_1.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row2.source = null;
							} else {
	                         		
        	row2.source = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row2.legacy_id = null;
							} else {
	                         		
        	row2.legacy_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row2.phone_type = null;
							} else {
	                         		
        	row2.phone_type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row2.phone_number = null;
							} else {
	                         		
        	row2.phone_number = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaFlex_3 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		





//Get new hashMap object
HashMap phoneHashMap = Response.initiateHashMap();
// Put values in hash map
phoneHashMap.put("phoneType", row2.phone_type);
phoneHashMap.put("phoneNo", row2.phone_number);
phoneHashMap.put("dialCode", null);
//Convert hashMap to JSON Object
JSONObject phoneJSONObject= Response.getObject(phoneHashMap);
//put object to JSONArray 
phoneArray.put(phoneJSONObject);

 


	tos_count_tJavaFlex_3++;

/**
 * [tJavaFlex_3 main ] stop
 */
	
	/**
	 * [tJavaFlex_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	

 



/**
 * [tJavaFlex_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaFlex_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	

 



/**
 * [tJavaFlex_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if(rs_tDBInput_1 !=null){
		rs_tDBInput_1.close();
	}
	stmt_tDBInput_1.close();
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tJavaFlex_3 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	


// end of the component, outside/closing the loop
globalMap.put("phoneArray", phoneArray);   
 


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaFlex_3", true);
end_Hash.put("tJavaFlex_3", System.currentTimeMillis());




/**
 * [tJavaFlex_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tJavaFlex_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	

 



/**
 * [tJavaFlex_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public String source;

				public String getSource () {
					return this.source;
				}
				
			    public String legacy_id;

				public String getLegacy_id () {
					return this.legacy_id;
				}
				
			    public String address_type;

				public String getAddress_type () {
					return this.address_type;
				}
				
			    public String address;

				public String getAddress () {
					return this.address;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String zipcode;

				public String getZipcode () {
					return this.zipcode;
				}
				
			    public String state_name;

				public String getState_name () {
					return this.state_name;
				}
				
			    public String country_name;

				public String getCountry_name () {
					return this.country_name;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
					this.source = readString(dis);
					
					this.legacy_id = readString(dis);
					
					this.address_type = readString(dis);
					
					this.address = readString(dis);
					
					this.city = readString(dis);
					
					this.zipcode = readString(dis);
					
					this.state_name = readString(dis);
					
					this.country_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.source,dos);
					
					// String
				
						writeString(this.legacy_id,dos);
					
					// String
				
						writeString(this.address_type,dos);
					
					// String
				
						writeString(this.address,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.zipcode,dos);
					
					// String
				
						writeString(this.state_name,dos);
					
					// String
				
						writeString(this.country_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("source="+source);
		sb.append(",legacy_id="+legacy_id);
		sb.append(",address_type="+address_type);
		sb.append(",address="+address);
		sb.append(",city="+city);
		sb.append(",zipcode="+zipcode);
		sb.append(",state_name="+state_name);
		sb.append(",country_name="+country_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String source;

				public String getSource () {
					return this.source;
				}
				
			    public String legacy_id;

				public String getLegacy_id () {
					return this.legacy_id;
				}
				
			    public String address_type;

				public String getAddress_type () {
					return this.address_type;
				}
				
			    public String address;

				public String getAddress () {
					return this.address;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public String zipcode;

				public String getZipcode () {
					return this.zipcode;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.source = readString(dis);
					
					this.legacy_id = readString(dis);
					
					this.address_type = readString(dis);
					
					this.address = readString(dis);
					
					this.city = readString(dis);
					
					this.state = readString(dis);
					
					this.zipcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.source,dos);
					
					// String
				
						writeString(this.legacy_id,dos);
					
					// String
				
						writeString(this.address_type,dos);
					
					// String
				
						writeString(this.address,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.zipcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",source="+source);
		sb.append(",legacy_id="+legacy_id);
		sb.append(",address_type="+address_type);
		sb.append(",address="+address);
		sb.append(",city="+city);
		sb.append(",state="+state);
		sb.append(",zipcode="+zipcode);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String source;

				public String getSource () {
					return this.source;
				}
				
			    public String legacy_id;

				public String getLegacy_id () {
					return this.legacy_id;
				}
				
			    public String address_type;

				public String getAddress_type () {
					return this.address_type;
				}
				
			    public String address;

				public String getAddress () {
					return this.address;
				}
				
			    public String city;

				public String getCity () {
					return this.city;
				}
				
			    public String state;

				public String getState () {
					return this.state;
				}
				
			    public String zipcode;

				public String getZipcode () {
					return this.zipcode;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_2Struct other = (after_tDBInput_2Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_2Struct other) {

		other.id = this.id;
	            other.source = this.source;
	            other.legacy_id = this.legacy_id;
	            other.address_type = this.address_type;
	            other.address = this.address;
	            other.city = this.city;
	            other.state = this.state;
	            other.zipcode = this.zipcode;
	            
	}

	public void copyKeysDataTo(after_tDBInput_2Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.source = readString(dis);
					
					this.legacy_id = readString(dis);
					
					this.address_type = readString(dis);
					
					this.address = readString(dis);
					
					this.city = readString(dis);
					
					this.state = readString(dis);
					
					this.zipcode = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.source,dos);
					
					// String
				
						writeString(this.legacy_id,dos);
					
					// String
				
						writeString(this.address_type,dos);
					
					// String
				
						writeString(this.address,dos);
					
					// String
				
						writeString(this.city,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.zipcode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",source="+source);
		sb.append(",legacy_id="+legacy_id);
		sb.append(",address_type="+address_type);
		sb.append(",address="+address);
		sb.append(",city="+city);
		sb.append(",state="+state);
		sb.append(",zipcode="+zipcode);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_4Process(globalMap);

		row44Struct row44 = new row44Struct();
row4Struct row4 = new row4Struct();





	
	/**
	 * [tJavaFlex_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_4", false);
		start_Hash.put("tJavaFlex_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaFlex_4 = 0;
		
    	class BytesLimit65535_tJavaFlex_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_4().limitLog4jByte();


// start part of your Java code
JSONArray addressArray = new JSONArray();    


 



/**
 * [tJavaFlex_4 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row44" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
					globalMap.get( "tHash_Lookup_row17" ))
					;					
					
	

row17Struct row17HashKey = new row17Struct();
row17Struct row17Default = new row17Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
row4Struct row4_tmp = new row4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
    	class BytesLimit65535_tDBInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_2().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
		        conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = 
"SELECT \n  `issuer_addresses`.`id`, \n  `issuer_addresses`.`source`, \n  `issuer_addresses`.`legacy_id`, \n  `issuer_addres"
+"ses`.`address_type`, \n  `issuer_addresses`.`address`, \n  `issuer_addresses`.`city`, \n  `issuer_addresses`.`state`, \n  `i"
+"ssuer_addresses`.`zipcode`\nFROM `issuer_addresses`\nWHERE \n`issuer_addresses`.`source`='"+context.source+"'\nAND\n`issuer_addresses`.`legacy_id`='"+context.legacy_id+"'";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row44.id = 0;
							} else {
		                          
            if(rs_tDBInput_2.getObject(1) != null) {
                row44.id = rs_tDBInput_2.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row44.source = null;
							} else {
	                         		
        	row44.source = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row44.legacy_id = null;
							} else {
	                         		
        	row44.legacy_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row44.address_type = null;
							} else {
	                         		
        	row44.address_type = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row44.address = null;
							} else {
	                         		
        	row44.address = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row44.city = null;
							} else {
	                         		
        	row44.city = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row44.state = null;
							} else {
	                         		
        	row44.state = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row44.zipcode = null;
							} else {
	                         		
        	row44.zipcode = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row44
			//row44


			
				if(execStat){
					runStat.updateStatOnConnection("row44"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row17" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow17 = false;
       		  	    	
       		  	    	
 							row17Struct row17ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row17HashKey.state_name_lowercase = StringHandling.DOWNCASE(row44.state) ;
                        		    		

								
		                        	row17HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row17.lookup( row17HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row17 != null && tHash_Lookup_row17.getCount(row17HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row17' and it contains more one result from keys :  row17.state_name_lowercase = '" + row17HashKey.state_name_lowercase + "'");
								} // G 071
							

							row17Struct row17 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row17Struct fromLookup_row17 = null;
							row17 = row17Default;
										 
							
								 
							
							
								if (tHash_Lookup_row17 !=null && tHash_Lookup_row17.hasNext()) { // G 099
								
							
								
								fromLookup_row17 = tHash_Lookup_row17.next();

							
							
								} // G 099
							
							

							if(fromLookup_row17 != null) {
								row17 = fromLookup_row17;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

row4 = null;


// # Output table : 'row4'
row4_tmp.source = row44.source ;
row4_tmp.legacy_id = row44.legacy_id ;
row4_tmp.address_type = row44.address_type ;
row4_tmp.address = row44.address ;
row4_tmp.city = row44.city ;
row4_tmp.zipcode = row44.zipcode ;
row4_tmp.state_name = row17.state_name ;
row4_tmp.country_name = row17.country_name ;
row4 = row4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tJavaFlex_4 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_4";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		



//Get new hashMap object
HashMap addressHashMap = Response.initiateHashMap();
// Put values in hash map
addressHashMap.put("addressType", row4.address_type);
addressHashMap.put("address", row4.address);
addressHashMap.put("state", row4.state_name);
addressHashMap.put("city", row4.city);
addressHashMap.put("country", row4.country_name);
addressHashMap.put("zip", row4.zipcode);
//Convert hashMap to JSON Object
JSONObject addressJSONObject= Response.getObject(addressHashMap);
//put object to JSONArray 
addressArray.put(addressJSONObject);

 


	tos_count_tJavaFlex_4++;

/**
 * [tJavaFlex_4 main ] stop
 */
	
	/**
	 * [tJavaFlex_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_4";

	

 



/**
 * [tJavaFlex_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaFlex_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_4";

	

 



/**
 * [tJavaFlex_4 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if(rs_tDBInput_2 !=null){
		rs_tDBInput_2.close();
	}
	stmt_tDBInput_2.close();
}

		   globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
		


 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row17 != null) {
						tHash_Lookup_row17.endGet();
					}
					globalMap.remove( "tHash_Lookup_row17" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row44"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tJavaFlex_4 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_4";

	


// end of the component, outside/closing the loop
globalMap.put("addressArray", addressArray);     

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaFlex_4", true);
end_Hash.put("tJavaFlex_4", System.currentTimeMillis());




/**
 * [tJavaFlex_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row17"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tJavaFlex_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_4";

	

 



/**
 * [tJavaFlex_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public String source;

				public String getSource () {
					return this.source;
				}
				
			    public String legacy_id;

				public String getLegacy_id () {
					return this.legacy_id;
				}
				
			    public String routing_number;

				public String getRouting_number () {
					return this.routing_number;
				}
				
			    public String account_number;

				public String getAccount_number () {
					return this.account_number;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.id = this.id;
	            other.source = this.source;
	            other.legacy_id = this.legacy_id;
	            other.routing_number = this.routing_number;
	            other.account_number = this.account_number;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.source = readString(dis);
					
					this.legacy_id = readString(dis);
					
					this.routing_number = readString(dis);
					
					this.account_number = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// String
				
						writeString(this.source,dos);
					
					// String
				
						writeString(this.legacy_id,dos);
					
					// String
				
						writeString(this.routing_number,dos);
					
					// String
				
						writeString(this.account_number,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",source="+source);
		sb.append(",legacy_id="+legacy_id);
		sb.append(",routing_number="+routing_number);
		sb.append(",account_number="+account_number);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row14" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaFlex_1 = 0;
		
    	class BytesLimit65535_tJavaFlex_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_1().limitLog4jByte();


// start part of your Java code
JSONArray accountArray = new JSONArray();    


 



/**
 * [tJavaFlex_1 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
    	class BytesLimit65535_tDBInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_3().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
		        conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  `issuer_accounts`.`id`, \n  `issuer_accounts`.`source`, \n  `issuer_accounts`.`legacy_id`, \n  `issuer_accounts`"
+".`routing_number`, \n  `issuer_accounts`.`account_number`\nFROM `issuer_accounts`\nWHERE \n`issuer_accounts`.`source`='"+context.source+"'\nAND\n`issuer_accounts`.`legacy_id`='"+context.legacy_id+"'";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row14.id = 0;
							} else {
		                          
            if(rs_tDBInput_3.getObject(1) != null) {
                row14.id = rs_tDBInput_3.getInt(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row14.source = null;
							} else {
	                         		
        	row14.source = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row14.legacy_id = null;
							} else {
	                         		
        	row14.legacy_id = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row14.routing_number = null;
							} else {
	                         		
        	row14.routing_number = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row14.account_number = null;
							} else {
	                         		
        	row14.account_number = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

			//row14
			//row14


			
				if(execStat){
					runStat.updateStatOnConnection("row14"+iterateId,1, 1);
				} 
			

		




//Get new hashMap object
HashMap accountHashMap = Response.initiateHashMap();
// Put values in hash map
accountHashMap.put("routingNumber", row14.routing_number);
accountHashMap.put("accountNumber", row14.account_number);
//Convert hashMap to JSON Object
JSONObject accountJSONObject= Response.getObject(accountHashMap);
//put object to JSONArray 
accountArray.put(accountJSONObject);

 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */
	
	/**
	 * [tJavaFlex_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaFlex_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if(rs_tDBInput_3 !=null){
		rs_tDBInput_3.close();
	}
	stmt_tDBInput_3.close();
}

		   globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
		


 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	


// end of the component, outside/closing the loop
globalMap.put("accountArray", accountArray);   
 


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row14"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tFixedFlowInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class logErrorStruct implements routines.system.IPersistableRow<logErrorStruct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public String dataSourceType;

				public String getDataSourceType () {
					return this.dataSourceType;
				}
				
			    public String dataSource;

				public String getDataSource () {
					return this.dataSource;
				}
				
			    public String jobName;

				public String getJobName () {
					return this.jobName;
				}
				
			    public String reason;

				public String getReason () {
					return this.reason;
				}
				
			    public String dataJson;

				public String getDataJson () {
					return this.dataJson;
				}
				
			    public String date;

				public String getDate () {
					return this.date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
					this.dataSourceType = readString(dis);
					
					this.dataSource = readString(dis);
					
					this.jobName = readString(dis);
					
					this.reason = readString(dis);
					
					this.dataJson = readString(dis);
					
					this.date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dataSourceType,dos);
					
					// String
				
						writeString(this.dataSource,dos);
					
					// String
				
						writeString(this.jobName,dos);
					
					// String
				
						writeString(this.reason,dos);
					
					// String
				
						writeString(this.dataJson,dos);
					
					// String
				
						writeString(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dataSourceType="+dataSourceType);
		sb.append(",dataSource="+dataSource);
		sb.append(",jobName="+jobName);
		sb.append(",reason="+reason);
		sb.append(",dataJson="+dataJson);
		sb.append(",date="+date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(logErrorStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class logValidationErrorStruct implements routines.system.IPersistableRow<logValidationErrorStruct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public String dataSourceType;

				public String getDataSourceType () {
					return this.dataSourceType;
				}
				
			    public String dataSource;

				public String getDataSource () {
					return this.dataSource;
				}
				
			    public String jobName;

				public String getJobName () {
					return this.jobName;
				}
				
			    public String reason;

				public String getReason () {
					return this.reason;
				}
				
			    public String dataJson;

				public String getDataJson () {
					return this.dataJson;
				}
				
			    public String date;

				public String getDate () {
					return this.date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
					this.dataSourceType = readString(dis);
					
					this.dataSource = readString(dis);
					
					this.jobName = readString(dis);
					
					this.reason = readString(dis);
					
					this.dataJson = readString(dis);
					
					this.date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dataSourceType,dos);
					
					// String
				
						writeString(this.dataSource,dos);
					
					// String
				
						writeString(this.jobName,dos);
					
					// String
				
						writeString(this.reason,dos);
					
					// String
				
						writeString(this.dataJson,dos);
					
					// String
				
						writeString(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dataSourceType="+dataSourceType);
		sb.append(",dataSource="+dataSource);
		sb.append(",jobName="+jobName);
		sb.append(",reason="+reason);
		sb.append(",dataJson="+dataJson);
		sb.append(",date="+date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(logValidationErrorStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class updateIssuersTableStruct implements routines.system.IPersistableRow<updateIssuersTableStruct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer id;

				public Integer getId () {
					return this.id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final updateIssuersTableStruct other = (updateIssuersTableStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(updateIssuersTableStruct other) {

		other.id = this.id;
	            
	}

	public void copyKeysDataTo(updateIssuersTableStruct other) {

		other.id = this.id;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
						this.id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(updateIssuersTableStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public boolean status;

				public boolean getStatus () {
					return this.status;
				}
				
			    public String msg;

				public String getMsg () {
					return this.msg;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
			        this.status = dis.readBoolean();
					
					this.msg = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// boolean
				
		            	dos.writeBoolean(this.status);
					
					// String
				
						writeString(this.msg,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("status="+String.valueOf(status));
		sb.append(",msg="+msg);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public Integer statusCode;

				public Integer getStatusCode () {
					return this.statusCode;
				}
				
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
						this.statusCode = readInteger(dis);
					
						this.body = (routines.system.Document) dis.readObject();
					
					this.string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.statusCode,dos);
					
					// Document
				
       			    	dos.writeObject(this.body);
					
					// String
				
						writeString(this.string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("statusCode="+String.valueOf(statusCode));
		sb.append(",body="+String.valueOf(body));
		sb.append(",string="+string);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public Integer errorCode;

				public Integer getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
						this.errorCode = readInteger(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+String.valueOf(errorCode));
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public String string;

				public String getString () {
					return this.string;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
					this.string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("string="+string);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public String string;

				public String getString () {
					return this.string;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
					this.string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("string="+string);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row5Struct row5 = new row5Struct();
row6Struct row6 = new row6Struct();
row13Struct row13 = new row13Struct();
logValidationErrorStruct logValidationError = new logValidationErrorStruct();
updateIssuersTableStruct updateIssuersTable = new updateIssuersTableStruct();
row7Struct row7 = new row7Struct();
logErrorStruct logError = new logErrorStruct();








	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("logValidationError" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_4 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_4().limitLog4jByte();

String fileName_tFileOutputDelimited_4 = "";
    fileName_tFileOutputDelimited_4 = (new java.io.File(context.logDirectory+ context.generalLogDirectory+"/"+TalendDate.getDate("yyyy-MM-dd")+"_log.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
        if(filetFileOutputDelimited_4.exists()){
            isFileGenerated_tFileOutputDelimited_4 = false;
        }
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */"#"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, true),"UTF-8"));
                                    if(filetFileOutputDelimited_4.length()==0){
                                        outtFileOutputDelimited_4.write("dataSourceType");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("dataSource");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("jobName");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("reason");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("dataJson");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("date");
                                        outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */




	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("updateIssuersTable" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBRow_1 = 0;
		
    	class BytesLimit65535_tDBRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBRow_1().limitLog4jByte();

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
				conn_tDBRow_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			
		java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
	

 



/**
 * [tDBRow_1 begin ] stop
 */



	
	/**
	 * [tXMLMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_2", false);
		start_Hash.put("tXMLMap_2", System.currentTimeMillis());
		
	
	currentComponent="tXMLMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row13" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tXMLMap_2 = 0;
		
    	class BytesLimit65535_tXMLMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tXMLMap_2().limitLog4jByte();

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_2{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_2__Struct {
	}
	Var__tXMLMap_2__Struct Var__tXMLMap_2 = new Var__tXMLMap_2__Struct();
// ###############################
// # Outputs initialization
logValidationErrorStruct logValidationError_tmp = new logValidationErrorStruct();
logValidationErrorStruct logValidationError_save = null;
updateIssuersTableStruct updateIssuersTable_tmp = new updateIssuersTableStruct();
updateIssuersTableStruct updateIssuersTable_save = null;
// ###############################
		int nb_line_tXMLMap_2 = 0; 
	
    XML_API_tXMLMap_2 xml_api_tXMLMap_2 = new XML_API_tXMLMap_2();


	            
 



/**
 * [tXMLMap_2 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_1", false);
		start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tExtractJSONFields_1 = 0;
		
    	class BytesLimit65535_tExtractJSONFields_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tExtractJSONFields_1().limitLog4jByte();

int nb_line_tExtractJSONFields_1 = 0;
String jsonStr_tExtractJSONFields_1 = "";

	

class ConvertJSONString_tExtractJSONFields_1{
    final static int Brace = 0 ; // {
    final static int Bracket = 1; // [
    private int barceType = -1 ;
    private String originalJsonString = "" ;
    private String originalLoopString = "" ;
    private String jsonString4XML = null;
    private String loopString4XML = null;
    private String additionRoot = null;
    
    public void barceType(){

        for (int c = 0; c < originalJsonString.length(); ++c) {
            if (originalJsonString.charAt(c) == '{') {
                barceType = Brace;
                break;
            } else if (originalJsonString.charAt(c) == '[') {
                barceType = Bracket;
                break;
            }
        }
    }

    public void setJsonString (String originalJsonString) {
        this.originalJsonString = originalJsonString;
    }
    
    public void setLoopString (String originalLoopString) {
        this.originalLoopString = originalLoopString;
    }
    
    public String getJsonString4XML(){
        return jsonString4XML;
    }
    
    public String getLoopString4XML(){
        if(loopString4XML.length()>1 && loopString4XML.endsWith("/")){
        	loopString4XML = loopString4XML.substring(0, loopString4XML.length()-1);
		}
        return loopString4XML;
    }
    
    public void setAdditionRoot(String additionRoot) {
        this.additionRoot = additionRoot;
    }
    
    public String getAdditionRoot(){
        return additionRoot;
    }
    
    public void generate() {
        barceType();
        jsonString4XML = originalJsonString;
        loopString4XML = originalLoopString;
        if (Brace == barceType) {
            if (isNeedAddRoot(originalJsonString)) {
                jsonString4XML = "{ \"root\": " + originalJsonString + " }";
                loopString4XML = "root" + originalLoopString;
                setAdditionRoot("root");
            }
        } else if (Bracket == barceType) {
            jsonString4XML = "{ \"root\" : { \"object\": "
                    + originalJsonString + " } }";
            loopString4XML = "root/object" + originalLoopString;
                setAdditionRoot("object");
        }
    }

    public boolean isNeedAddRoot(String originalJsonString) {
        boolean isNeedAddRoot = false;
        net.sf.json.JSONObject jso = net.sf.json.JSONObject
                .fromObject(originalJsonString);
        String jsonKey = "";
        Object firstObject = null;
        if (jso.names().size() == 1) {
            jsonKey = jso.names().get(0).toString();
            firstObject = jso.get(jsonKey);
        }
        if (jso.size() > 1
                || (firstObject != null
                        && firstObject instanceof net.sf.json.JSONArray && ((net.sf.json.JSONArray) firstObject)
                        .size() > 1)) {
            isNeedAddRoot = true;
        }
        return isNeedAddRoot;
    }

}

ConvertJSONString_tExtractJSONFields_1 cjs_tExtractJSONFields_1 = new ConvertJSONString_tExtractJSONFields_1();

de.odysseus.staxon.json.JsonXMLConfig config_tExtractJSONFields_1 = new de.odysseus.staxon.json.JsonXMLConfigBuilder().multiplePI(false).build();
de.odysseus.staxon.json.JsonXMLInputFactory jsonXMLInputFactory_tExtractJSONFields_1 = new de.odysseus.staxon.json.JsonXMLInputFactory(config_tExtractJSONFields_1);
javax.xml.stream.XMLOutputFactory xmlOutputFactory_tExtractJSONFields_1 = javax.xml.stream.XMLOutputFactory.newInstance();
boolean isGetWholeJson_tExtractJSONFields_1 = false;

	class OriginalJSONString_tExtractJSONFields_1 {
}
			
			OriginalJSONString_tExtractJSONFields_1 originalJSONString_tExtractJSONFields_1 = new OriginalJSONString_tExtractJSONFields_1();

class XML_API_tExtractJSONFields_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}

String xmlStr_tExtractJSONFields_1 = "";

XML_API_tExtractJSONFields_1 xml_api_tExtractJSONFields_1 = new XML_API_tExtractJSONFields_1();
 
 



/**
 * [tExtractJSONFields_1 begin ] stop
 */





	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("logError" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_2().limitLog4jByte();

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.logDirectory+ context.generalLogDirectory+"/"+TalendDate.getDate("yyyy-MM-dd")+"_log.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */"#"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"UTF-8"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("dataSourceType");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("dataSource");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("jobName");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("reason");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("dataJson");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("date");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tXMLMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_1", false);
		start_Hash.put("tXMLMap_1", System.currentTimeMillis());
		
	
	currentComponent="tXMLMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tXMLMap_1 = 0;
		
    	class BytesLimit65535_tXMLMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tXMLMap_1().limitLog4jByte();

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_1__Struct {
	}
	Var__tXMLMap_1__Struct Var__tXMLMap_1 = new Var__tXMLMap_1__Struct();
// ###############################
// # Outputs initialization
logErrorStruct logError_tmp = new logErrorStruct();
logErrorStruct logError_save = null;
// ###############################
		int nb_line_tXMLMap_1 = 0; 
	
    XML_API_tXMLMap_1 xml_api_tXMLMap_1 = new XML_API_tXMLMap_1();


	            
 



/**
 * [tXMLMap_1 begin ] stop
 */



	
	/**
	 * [tRESTClient_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTClient_1", false);
		start_Hash.put("tRESTClient_1", System.currentTimeMillis());
		
	
	currentComponent="tRESTClient_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRESTClient_1 = 0;
		
    	class BytesLimit65535_tRESTClient_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRESTClient_1().limitLog4jByte();

 



/**
 * [tRESTClient_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";

	
		int tos_count_tFixedFlowInput_2 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_2().limitLog4jByte();

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row3.string = null;        	            	
    	            	
 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

    ///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//Get new hashMap object
HashMap issuerPhoneHashMap = Response.initiateHashMap();
// Put values in hash map
issuerPhoneHashMap.put("issuerPhone", (JSONArray) globalMap.get("phoneArray"));
//Convert hashMap to JSON Object
JSONObject issuerPhoneJSONObject= Response.getObject(issuerPhoneHashMap);
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//Get new hashMap object
HashMap issuerAddressHashMap = Response.initiateHashMap();
// Put values in hash map
issuerAddressHashMap.put("issuerAddress", (JSONArray) globalMap.get("addressArray"));
//Convert hashMap to JSON Object
JSONObject issuerAddressJSONObject= Response.getObject(issuerAddressHashMap);
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//Get new hashMap object
HashMap issuerAccountHashMap = Response.initiateHashMap();
// Put values in hash map
issuerAccountHashMap.put("issuerAccount", (JSONArray) globalMap.get("accountArray"));
//Convert hashMap to JSON Object
JSONObject issuerAccountJSONObject= Response.getObject(issuerAccountHashMap);
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// start part of your Java code
JSONArray identificationArray = new JSONArray();  
//Get new hashMap object
HashMap issuerIdentificationHashMap = Response.initiateHashMap();
// Put values in hash map
issuerIdentificationHashMap.put("issuerIdentification", identificationArray);
//Convert hashMap to JSON Object
JSONObject issuerIdentificationJSONObject= Response.getObject(issuerIdentificationHashMap);

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
HashMap hashMapIssuer = Response.initiateHashMap();

// Put values in hash map

hashMapIssuer.put("issuerRefNo", context.legacy_id);
hashMapIssuer.put("issuerName", context.issuer_name);
hashMapIssuer.put("issuerType", context.issuer_type);
hashMapIssuer.put("primaryPhoneNumber", null);
hashMapIssuer.put("address", issuerAddressJSONObject);
hashMapIssuer.put("phone", issuerPhoneJSONObject);
hashMapIssuer.put("identification", issuerIdentificationJSONObject);
hashMapIssuer.put("account", issuerAccountJSONObject);

//Convert hashMap to JSON Object
JSONObject jsonObjectBody= Response.getObject(hashMapIssuer);

row5.string =jsonObjectBody.toString();
globalMap.put("dataJson",jsonObjectBody.toString());
//System.out.println(jsonObjectBody.toString());

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tRESTClient_1 main ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		
	row7 = null;	row6 = null;

// expected response body
javax.ws.rs.core.Response responseDoc_tRESTClient_1 = null;

try {
	// request body
	org.dom4j.Document requestDoc_tRESTClient_1 = null;
	String requestString_tRESTClient_1 = null;
			requestString_tRESTClient_1 = row5.string;

	Object requestBody_tRESTClient_1 = requestDoc_tRESTClient_1 != null ? requestDoc_tRESTClient_1 : requestString_tRESTClient_1;

	

    //resposne class name
	Class<?> responseClass_tRESTClient_1
		= String.class;

	// create web client instance
	org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_1 =
			new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

	boolean inOSGi = routines.system.BundleUtils.inOSGi();

	final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_1 =
			new java.util.ArrayList<org.apache.cxf.feature.Feature>();

	
		String url = context.ciamApiBaseUrl+context.ciamApiRegisterIssuer;
		// {baseUri}tRESTClient
		factoryBean_tRESTClient_1.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
		factoryBean_tRESTClient_1.setAddress(url);
	

	

	

	

	factoryBean_tRESTClient_1.setFeatures(features_tRESTClient_1);


	java.util.List<Object> providers_tRESTClient_1 = new java.util.ArrayList<Object>();
	providers_tRESTClient_1.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
		// workaround for https://jira.talendforge.org/browse/TESB-7276
		public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
											java.lang.reflect.Type type,
											java.lang.annotation.Annotation[] anns,
											javax.ws.rs.core.MediaType mt,
											javax.ws.rs.core.MultivaluedMap<String, String> headers,
											java.io.InputStream is)
				throws IOException, javax.ws.rs.WebApplicationException {
			String contentLength = headers.getFirst("Content-Length");
			if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
					&& Integer.valueOf(contentLength) <= 0) {
				try {
					return org.dom4j.DocumentHelper.parseText("<root/>");
				} catch (org.dom4j.DocumentException e_tRESTClient_1) {
					e_tRESTClient_1.printStackTrace();
				}
				return null;
			}
			return super.readFrom(cls, type, anns, mt, headers, is);
		}
	});
	org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_1 =
			new org.apache.cxf.jaxrs.provider.json.JSONProvider();
		jsonProvider_tRESTClient_1.setIgnoreNamespaces(true);
		jsonProvider_tRESTClient_1.setAttributesToElements(true);
	
	
		jsonProvider_tRESTClient_1.setSupportUnwrapped(true);
		jsonProvider_tRESTClient_1.setWrapperName("root");
	
	
		jsonProvider_tRESTClient_1.setDropRootElement(true);
		jsonProvider_tRESTClient_1.setConvertTypesToStrings(false);
	providers_tRESTClient_1.add(jsonProvider_tRESTClient_1);
	factoryBean_tRESTClient_1.setProviders(providers_tRESTClient_1);
	factoryBean_tRESTClient_1.setTransportId("http://cxf.apache.org/transports/http");

	boolean use_auth_tRESTClient_1 = false;
	if (use_auth_tRESTClient_1 && "SAML".equals("BASIC")) {
		if (!inOSGi) {
			throw new IllegalArgumentException("SAML based security scenarios are not supported in Studio (standalone)");
		}
		// set SAML Token authentication
		
		 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

		org.apache.cxf.ws.security.trust.STSClient stsClient =
			org.talend.esb.security.saml.STSClientUtils.createSTSClient(factoryBean_tRESTClient_1.getBus(),
				"username", decryptedPassword_tRESTClient_1);
		
		org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_1, stsClient);
	}

	org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_1 = factoryBean_tRESTClient_1.createWebClient();

	// set request path
	webClient_tRESTClient_1.path("");

	// set connection properties
	org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_1 = org.apache.cxf.jaxrs.client.WebClient.getConfig(webClient_tRESTClient_1);
	org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_1 = clientConfig_tRESTClient_1.getHttpConduit();

    if (clientConfig_tRESTClient_1.getEndpoint() != null
            && clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo() != null) {
        clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo().setProperty("enable.webclient.operation.reporting",
                                                                          true);
    }

	

	if (use_auth_tRESTClient_1 && "BASIC".equals("BASIC")) {
		// set BASIC auth
		
		 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
			authPolicy_tRESTClient_1.setAuthorizationType("Basic");
			authPolicy_tRESTClient_1.setUserName("username");
			authPolicy_tRESTClient_1.setPassword(decryptedPassword_tRESTClient_1);
		conduit_tRESTClient_1.setAuthorization(authPolicy_tRESTClient_1);
	} else if (use_auth_tRESTClient_1 && "HTTP Digest".equals("BASIC")) {
		// set Digest auth
		
		 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
		authPolicy_tRESTClient_1.setAuthorizationType("Digest");
		authPolicy_tRESTClient_1.setUserName("username");
		authPolicy_tRESTClient_1.setPassword(decryptedPassword_tRESTClient_1);
		conduit_tRESTClient_1.setAuthorization(authPolicy_tRESTClient_1);
	}

	if (!inOSGi) {
		conduit_tRESTClient_1.getClient().setReceiveTimeout((long)(60 * 1000L));
		conduit_tRESTClient_1.getClient().setConnectionTimeout((long)(30 * 1000L));
		boolean use_proxy_tRESTClient_1 = false;
		if (use_proxy_tRESTClient_1) {
			
			 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("f4f7aba1746784ea");

			conduit_tRESTClient_1.getClient().setProxyServer("61.163.92.4");
			conduit_tRESTClient_1.getClient().setProxyServerPort(Integer.valueOf(8080));
			conduit_tRESTClient_1.getProxyAuthorization().setUserName("");
			conduit_tRESTClient_1.getProxyAuthorization().setPassword(decryptedPassword_tRESTClient_1);
		}
	}

	

	

	
		// set Content-Type
		webClient_tRESTClient_1.type("application/json");
	

	
		// set Accept-Type
		webClient_tRESTClient_1.accept("application/json");
	

	
		// set optional query and header properties if any
	
		webClient_tRESTClient_1.header("accept", "application/json");
	
		webClient_tRESTClient_1.header("content-type", "application/json");
	
		webClient_tRESTClient_1.header("x-api-key", context.ciamApiKey);
	
	if (use_auth_tRESTClient_1 && "OAUTH2_BEARER".equals("BASIC")) {
		// set oAuth2 bearer token
		webClient_tRESTClient_1.header("Authorization", "Bearer " + "");
	}
	
	if (use_auth_tRESTClient_1 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {
 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

        String username_tRESTClient_1 = "username";
        String password_tRESTClient_1 = decryptedPassword_tRESTClient_1;

        String bearerHeader_tRESTClient_1 = null;

        try {
			if (!inOSGi) {
				org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_1 =
					new org.springframework.context.support.ClassPathXmlApplicationContext("META-INF/tesb/oidc-context.xml");
				org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_1 = context_tRESTClient_1.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
				bearerHeader_tRESTClient_1 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_1, password_tRESTClient_1, oidcConfiguration_tRESTClient_1);
			}else{
				bearerHeader_tRESTClient_1 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_1, password_tRESTClient_1);
			}
		} catch (Exception ex) {
            throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ", ex);
        }

		webClient_tRESTClient_1.header("Authorization", bearerHeader_tRESTClient_1);
	}
    
	// if FORM request then capture query parameters into Form, otherwise set them as queries
	
		
	


	try {
		// start send request
		
			
				responseDoc_tRESTClient_1 = webClient_tRESTClient_1.post(requestBody_tRESTClient_1);
			
		


		int webClientResponseStatus_tRESTClient_1 = webClient_tRESTClient_1.getResponse().getStatus();
		if (webClientResponseStatus_tRESTClient_1 >= 300) {
			throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_1.getResponse());
		}

		
			if (row6 == null) {
				row6 = new row6Struct();
			}

			row6.statusCode = webClientResponseStatus_tRESTClient_1;
			
				
				Object responseObj_tRESTClient_1 = null;
				if(responseDoc_tRESTClient_1 != null && responseDoc_tRESTClient_1.hasEntity()){
					responseObj_tRESTClient_1 = responseDoc_tRESTClient_1.readEntity(responseClass_tRESTClient_1);
				
				if(responseObj_tRESTClient_1 != null){
					if (responseClass_tRESTClient_1 == String.class) {
						row6.string = (String) responseObj_tRESTClient_1;
					} else {
						routines.system.Document responseTalendDoc_tRESTClient_1 = null;
						if (null != responseObj_tRESTClient_1) {
							responseTalendDoc_tRESTClient_1 = new routines.system.Document();
							responseTalendDoc_tRESTClient_1.setDocument((org.dom4j.Document) responseObj_tRESTClient_1);
						}
						row6.body = responseTalendDoc_tRESTClient_1;
					}
				}
			}
			


			globalMap.put("tRESTClient_1_HEADERS", webClient_tRESTClient_1.getResponse().getHeaders());
			
			
			
			// handle "oneway" for PUT, POST and PATCH with empty response payload
			if (webClientResponseStatus_tRESTClient_1 == 202 && responseObj_tRESTClient_1 == null){
				row6.string = "";
				return;
			}
			
		

	} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_1) {
		
			if (row7 == null) {
				row7 = new row7Struct();
			}
			row7.errorCode = ex_tRESTClient_1.getResponse().getStatus();

			String errorMessage_tRESTClient_1 = null;
			try {
				errorMessage_tRESTClient_1 = ex_tRESTClient_1.getResponse().readEntity(String.class);
			} catch (Exception exe_tRESTClient_1) {
				// ignore
			}
			if (null == errorMessage_tRESTClient_1 || 0 == errorMessage_tRESTClient_1.trim().length()) {
				errorMessage_tRESTClient_1 = ex_tRESTClient_1.getMessage();
			}
			row7.errorMessage = errorMessage_tRESTClient_1;

			globalMap.put("tRESTClient_1_HEADERS", ex_tRESTClient_1.getResponse().getHeaders());
			
		
	}

} catch(Exception e_tRESTClient_1) {
	
		new TalendException(e_tRESTClient_1, currentComponent, globalMap).printStackTrace();
	
}


 


	tos_count_tRESTClient_1++;

/**
 * [tRESTClient_1 main ] stop
 */
	
	/**
	 * [tRESTClient_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	

 



/**
 * [tRESTClient_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tExtractJSONFields_1 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

            if(row6.string!=null){// C_01
                jsonStr_tExtractJSONFields_1 = row6.string.toString();
   
row13 = null;

	

    org.dom4j.io.SAXReader reader_tExtractJSONFields_1 = new org.dom4j.io.SAXReader();
    org.dom4j.Document doc_tExtractJSONFields_1 = null;
    java.util.HashMap xmlNameSpaceMap_tExtractJSONFields_1 = new java.util.HashMap<String, String>();
    org.dom4j.XPath x_tExtractJSONFields_1 = null;
    java.util.List<org.dom4j.tree.AbstractNode> nodeList_tExtractJSONFields_1 = null;
    boolean isStructError_tExtractJSONFields_1 = true;

    String loopQuery_tExtractJSONFields_1 =  "/" ;
    String oraginalJsonStr_tExtractJSONFields_1 = jsonStr_tExtractJSONFields_1;
    cjs_tExtractJSONFields_1.setJsonString(jsonStr_tExtractJSONFields_1);
    cjs_tExtractJSONFields_1.setLoopString(loopQuery_tExtractJSONFields_1);
    java.io.ByteArrayInputStream bais_tExtractJSONFields_1 = null;
    java.io.ByteArrayOutputStream  baos_tExtractJSONFields_1 = new java.io.ByteArrayOutputStream();
    try {
        cjs_tExtractJSONFields_1.generate();
        jsonStr_tExtractJSONFields_1 = cjs_tExtractJSONFields_1.getJsonString4XML();
        loopQuery_tExtractJSONFields_1 = cjs_tExtractJSONFields_1.getLoopString4XML();
        bais_tExtractJSONFields_1 = new ByteArrayInputStream(jsonStr_tExtractJSONFields_1.getBytes("UTF-8"));
        javax.xml.stream.XMLEventReader xmlEventReader_tExtractJSONFields_1 = jsonXMLInputFactory_tExtractJSONFields_1.createXMLEventReader(bais_tExtractJSONFields_1);
        javax.xml.stream.XMLEventWriter xmLEventWriter_tExtractJSONFields_1 = xmlOutputFactory_tExtractJSONFields_1.createXMLEventWriter(baos_tExtractJSONFields_1,"UTF-8");
        xmLEventWriter_tExtractJSONFields_1.add(xmlEventReader_tExtractJSONFields_1);
        //convert json string to xml
        xmlStr_tExtractJSONFields_1 = baos_tExtractJSONFields_1.toString();  
        xmLEventWriter_tExtractJSONFields_1.close();
        xmlEventReader_tExtractJSONFields_1.close();
    
        doc_tExtractJSONFields_1= reader_tExtractJSONFields_1.read(new java.io.StringReader(xmlStr_tExtractJSONFields_1));
        x_tExtractJSONFields_1 = doc_tExtractJSONFields_1.createXPath(loopQuery_tExtractJSONFields_1);
        x_tExtractJSONFields_1.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1); 
        nodeList_tExtractJSONFields_1 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tExtractJSONFields_1.selectNodes(doc_tExtractJSONFields_1);
        isStructError_tExtractJSONFields_1 = false;
        
    }catch(java.lang.Exception ex_tExtractJSONFields_1){
    System.err.println(ex_tExtractJSONFields_1.getMessage());
    }finally {
        baos_tExtractJSONFields_1.close();
        if(bais_tExtractJSONFields_1!=null){
            bais_tExtractJSONFields_1.close();
        }
    }
    
    org.dom4j.Node node_tExtractJSONFields_1 = null;
    String str_tExtractJSONFields_1 = "";
    for(int i_tExtractJSONFields_1=0; isStructError_tExtractJSONFields_1 || (nodeList_tExtractJSONFields_1!=null && i_tExtractJSONFields_1 < nodeList_tExtractJSONFields_1.size());i_tExtractJSONFields_1++){
        
        if(!isStructError_tExtractJSONFields_1){
            row13 = null;
            row13 = new row13Struct();
        
            org.dom4j.tree.AbstractNode temp_tExtractJSONFields_1 = nodeList_tExtractJSONFields_1.get(i_tExtractJSONFields_1);
    
            nb_line_tExtractJSONFields_1++; 
            try{
                org.dom4j.XPath xTmp0_tExtractJSONFields_1 = temp_tExtractJSONFields_1.createXPath("status");
                xTmp0_tExtractJSONFields_1.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
	                Object obj0_tExtractJSONFields_1 = xTmp0_tExtractJSONFields_1.evaluate(temp_tExtractJSONFields_1);
	                if(obj0_tExtractJSONFields_1 instanceof String || obj0_tExtractJSONFields_1 instanceof Number){
	                    node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
	                    str_tExtractJSONFields_1 = String.valueOf(obj0_tExtractJSONFields_1);
	                }else{
                    	node_tExtractJSONFields_1 = xTmp0_tExtractJSONFields_1.selectSingleNode(temp_tExtractJSONFields_1);
						
	                        str_tExtractJSONFields_1 = xTmp0_tExtractJSONFields_1.valueOf(temp_tExtractJSONFields_1);
						
	                }
				
										if(xml_api_tExtractJSONFields_1.isMissing(node_tExtractJSONFields_1) || xml_api_tExtractJSONFields_1.isEmpty(node_tExtractJSONFields_1)){
											row13.status =false;
										}else{
									
										row13.status = ParserUtils.parseTo_boolean(str_tExtractJSONFields_1);
									
										}
							
                org.dom4j.XPath xTmp1_tExtractJSONFields_1 = temp_tExtractJSONFields_1.createXPath("msg");
                xTmp1_tExtractJSONFields_1.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
	                Object obj1_tExtractJSONFields_1 = xTmp1_tExtractJSONFields_1.evaluate(temp_tExtractJSONFields_1);
	                if(obj1_tExtractJSONFields_1 instanceof String || obj1_tExtractJSONFields_1 instanceof Number){
	                    node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
	                    str_tExtractJSONFields_1 = String.valueOf(obj1_tExtractJSONFields_1);
	                }else{
                    	node_tExtractJSONFields_1 = xTmp1_tExtractJSONFields_1.selectSingleNode(temp_tExtractJSONFields_1);
						
	                        str_tExtractJSONFields_1 = xTmp1_tExtractJSONFields_1.valueOf(temp_tExtractJSONFields_1);
						
	                }
				
										if(xml_api_tExtractJSONFields_1.isEmpty(node_tExtractJSONFields_1)){
											row13.msg ="";
										}else if(xml_api_tExtractJSONFields_1.isMissing(node_tExtractJSONFields_1 )){ 
											row13.msg =null;
										}else{
									
									row13.msg = str_tExtractJSONFields_1;
								
										}
							
}catch(java.lang.Exception ex_tExtractJSONFields_1){
    System.err.println(ex_tExtractJSONFields_1.getMessage());
    row13 = null;
        }
    }
    
    isStructError_tExtractJSONFields_1 = false;

 


 


	tos_count_tExtractJSONFields_1++;

/**
 * [tExtractJSONFields_1 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tXMLMap_2 main ] start
	 */

	

	
	
	currentComponent="tXMLMap_2";

	

			//row13
			//row13


			
				if(execStat){
					runStat.updateStatOnConnection("row13"+iterateId,1, 1);
				} 
			

		


	boolean rejectedInnerJoin_tXMLMap_2 = false;
	boolean rejectedDocInnerJoin_tXMLMap_2 = false;
	boolean mainRowRejected_tXMLMap_2 = false;
	boolean isMatchDocRowtXMLMap_2 = false;
	  
	
		


			
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tXMLMap_2__Struct Var = Var__tXMLMap_2;
		// ###############################
		// # Output tables

logValidationError = null;
updateIssuersTable = null;


// # Output table : 'logValidationError'
// # Filter conditions 
if( 

!row13.status

 ) {
logValidationError_tmp.dataSourceType = "table" ;
logValidationError_tmp.dataSource = "issuers";
logValidationError_tmp.jobName = jobName;
logValidationError_tmp.reason = row13.msg;
logValidationError_tmp.dataJson = (String) globalMap.get("dataJson");
logValidationError_tmp.date = TalendDate.getDate("yyyy-MM-dd HH:mm:ss");
logValidationError = logValidationError_tmp;
} // closing filter/reject

// # Output table : 'updateIssuersTable'
// # Filter conditions 
if( 

row13.status

 ) {
updateIssuersTable_tmp.id = context.id;
updateIssuersTable = updateIssuersTable_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2 = false;



 


	tos_count_tXMLMap_2++;

/**
 * [tXMLMap_2 main ] stop
 */
	
	/**
	 * [tXMLMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tXMLMap_2";

	

 



/**
 * [tXMLMap_2 process_data_begin ] stop
 */
// Start of branch "logValidationError"
if(logValidationError != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

			//logValidationError
			//logValidationError


			
				if(execStat){
					runStat.updateStatOnConnection("logValidationError"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(logValidationError.dataSourceType != null) {
                        sb_tFileOutputDelimited_4.append(
                            logValidationError.dataSourceType
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(logValidationError.dataSource != null) {
                        sb_tFileOutputDelimited_4.append(
                            logValidationError.dataSource
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(logValidationError.jobName != null) {
                        sb_tFileOutputDelimited_4.append(
                            logValidationError.jobName
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(logValidationError.reason != null) {
                        sb_tFileOutputDelimited_4.append(
                            logValidationError.reason
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(logValidationError.dataJson != null) {
                        sb_tFileOutputDelimited_4.append(
                            logValidationError.dataJson
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(logValidationError.date != null) {
                        sb_tFileOutputDelimited_4.append(
                            logValidationError.date
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "logValidationError"




// Start of branch "updateIssuersTable"
if(updateIssuersTable != null) { 



	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

			//updateIssuersTable
			//updateIssuersTable


			
				if(execStat){
					runStat.updateStatOnConnection("updateIssuersTable"+iterateId,1, 1);
				} 
			

		

query_tDBRow_1 = "UPDATE `issuers` SET `pushedToCiam`=1 WHERE id="+context.id;;
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
		stmt_tDBRow_1.execute(query_tDBRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */

} // End of branch "updateIssuersTable"




	
	/**
	 * [tXMLMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tXMLMap_2";

	

 



/**
 * [tXMLMap_2 process_data_end ] stop
 */

} // End of branch "row13"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_end ] stop
 */

} // End of branch "row6"




// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tXMLMap_1 main ] start
	 */

	

	
	
	currentComponent="tXMLMap_1";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		


	boolean rejectedInnerJoin_tXMLMap_1 = false;
	boolean rejectedDocInnerJoin_tXMLMap_1 = false;
	boolean mainRowRejected_tXMLMap_1 = false;
	boolean isMatchDocRowtXMLMap_1 = false;
	  
	
		


			
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tXMLMap_1__Struct Var = Var__tXMLMap_1;
		// ###############################
		// # Output tables

logError = null;


// # Output table : 'logError'
logError_tmp.dataSourceType = "database";
logError_tmp.dataSource = "issuer";
logError_tmp.jobName = jobName;
logError_tmp.reason = ServerErrorCode.toMessage(row7.errorCode) ;
logError_tmp.dataJson = (String) globalMap.get("dataJson");;
logError_tmp.date = TalendDate.getDate("yyyy-MM-dd HH:mm:ss");
logError = logError_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_1 = false;



 


	tos_count_tXMLMap_1++;

/**
 * [tXMLMap_1 main ] stop
 */
	
	/**
	 * [tXMLMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tXMLMap_1";

	

 



/**
 * [tXMLMap_1 process_data_begin ] stop
 */
// Start of branch "logError"
if(logError != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

			//logError
			//logError


			
				if(execStat){
					runStat.updateStatOnConnection("logError"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(logError.dataSourceType != null) {
                        sb_tFileOutputDelimited_2.append(
                            logError.dataSourceType
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(logError.dataSource != null) {
                        sb_tFileOutputDelimited_2.append(
                            logError.dataSource
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(logError.jobName != null) {
                        sb_tFileOutputDelimited_2.append(
                            logError.jobName
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(logError.reason != null) {
                        sb_tFileOutputDelimited_2.append(
                            logError.reason
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(logError.dataJson != null) {
                        sb_tFileOutputDelimited_2.append(
                            logError.dataJson
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(logError.date != null) {
                        sb_tFileOutputDelimited_2.append(
                            logError.date
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "logError"




	
	/**
	 * [tXMLMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tXMLMap_1";

	

 



/**
 * [tXMLMap_1 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tRESTClient_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	

 



/**
 * [tRESTClient_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tRESTClient_1 end ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	


// [tRESTCliend_end]
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRESTClient_1", true);
end_Hash.put("tRESTClient_1", System.currentTimeMillis());




/**
 * [tRESTClient_1 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
   globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tExtractJSONFields_1", true);
end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());




/**
 * [tExtractJSONFields_1 end ] stop
 */

	
	/**
	 * [tXMLMap_2 end ] start
	 */

	

	
	
	currentComponent="tXMLMap_2";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row13"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tXMLMap_2", true);
end_Hash.put("tXMLMap_2", System.currentTimeMillis());




/**
 * [tXMLMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	



		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("logValidationError"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_4 end ] stop
 */




	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

	
	stmt_tDBRow_1.close();	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("updateIssuersTable"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */










	
	/**
	 * [tXMLMap_1 end ] start
	 */

	

	
	
	currentComponent="tXMLMap_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tXMLMap_1", true);
end_Hash.put("tXMLMap_1", System.currentTimeMillis());




/**
 * [tXMLMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("logError"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tRESTClient_1 finally ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	

 



/**
 * [tRESTClient_1 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 finally ] stop
 */

	
	/**
	 * [tXMLMap_2 finally ] start
	 */

	

	
	
	currentComponent="tXMLMap_2";

	

 



/**
 * [tXMLMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */




	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 finally ] stop
 */










	
	/**
	 * [tXMLMap_1 finally ] start
	 */

	

	
	
	currentComponent="tXMLMap_1";

	

 



/**
 * [tXMLMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public String dataSourceType;

				public String getDataSourceType () {
					return this.dataSourceType;
				}
				
			    public String dataSource;

				public String getDataSource () {
					return this.dataSource;
				}
				
			    public String jobName;

				public String getJobName () {
					return this.jobName;
				}
				
			    public String reason;

				public String getReason () {
					return this.reason;
				}
				
			    public String dataJson;

				public String getDataJson () {
					return this.dataJson;
				}
				
			    public String date;

				public String getDate () {
					return this.date;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
					this.dataSourceType = readString(dis);
					
					this.dataSource = readString(dis);
					
					this.jobName = readString(dis);
					
					this.reason = readString(dis);
					
					this.dataJson = readString(dis);
					
					this.date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.dataSourceType,dos);
					
					// String
				
						writeString(this.dataSource,dos);
					
					// String
				
						writeString(this.jobName,dos);
					
					// String
				
						writeString(this.reason,dos);
					
					// String
				
						writeString(this.dataJson,dos);
					
					// String
				
						writeString(this.date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("dataSourceType="+dataSourceType);
		sb.append(",dataSource="+dataSource);
		sb.append(",jobName="+jobName);
		sb.append(",reason="+reason);
		sb.append(",dataJson="+dataJson);
		sb.append(",date="+date);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_3 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_3().limitLog4jByte();

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File(context.logDirectory+ context.generalLogDirectory+"/"+TalendDate.getDate("yyyy-MM-dd")+"_log.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
        if(filetFileOutputDelimited_3.exists()){
            isFileGenerated_tFileOutputDelimited_3 = false;
        }
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */"#"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, true),"UTF-8"));
                                    if(filetFileOutputDelimited_3.length()==0){
                                        outtFileOutputDelimited_3.write("dataSourceType");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("dataSource");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("jobName");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("reason");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("dataJson");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("date");
                                        outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";

	
		int tos_count_tFixedFlowInput_4 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_4().limitLog4jByte();

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row12.dataSourceType = "database";
    	            	        	            	
    	            		row12.dataSource = "issuers";
    	            	        	            	
    	            		row12.jobName = jobName;
    	            	        	            	
    	            		row12.reason = context.ciamServerError;
    	            	        	            	
    	            		row12.dataJson = (String) globalMap.get("dataJson");;
    	            	        	            	
    	            		row12.date = TalendDate.getDate("yyyy-MM-dd HH:mm:ss");
    	            	
 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                            if(row12.dataSourceType != null) {
                        sb_tFileOutputDelimited_3.append(
                            row12.dataSourceType
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row12.dataSource != null) {
                        sb_tFileOutputDelimited_3.append(
                            row12.dataSource
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row12.jobName != null) {
                        sb_tFileOutputDelimited_3.append(
                            row12.jobName
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row12.reason != null) {
                        sb_tFileOutputDelimited_3.append(
                            row12.reason
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row12.dataJson != null) {
                        sb_tFileOutputDelimited_3.append(
                            row12.dataJson
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row12.date != null) {
                        sb_tFileOutputDelimited_3.append(
                            row12.date
                        );
                            }
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	



		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
    	class BytesLimit65535_tDBConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBConnection_1().limitLog4jByte();
	

	
		String properties_tDBConnection_1 = "noDatetimeStringSync=true";
		if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
			properties_tDBConnection_1 += "rewriteBatchedStatements=true";
		}else if (properties_tDBConnection_1 != null && !properties_tDBConnection_1.contains("rewriteBatchedStatements")) {
			properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
		}
		
		String url_tDBConnection_1 = "jdbc:mysql://" + context.mysql_host + ":" + context.mysql_port  + "/" + context.mysql_database + "?" + properties_tDBConnection_1;

	String dbUser_tDBConnection_1 = context.mysql_user;
	
	
		
	final String decryptedPassword_tDBConnection_1 = context.mysql_password; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	

	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "org.gjt.mm.mysql.Driver";
			java.lang.Class.forName(driverClass_tDBConnection_1);
		
		conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("conn_tDBConnection_1",conn_tDBConnection_1);

	globalMap.put("db_tDBConnection_1",context.mysql_database);
 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFixedFlowInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public String job_name;

				public String getJob_name () {
					return this.job_name;
				}
				
			    public int parent_id;

				public int getParent_id () {
					return this.parent_id;
				}
				
			    public java.util.Date start_at;

				public java.util.Date getStart_at () {
					return this.start_at;
				}
				
			    public java.util.Date end_at;

				public java.util.Date getEnd_at () {
					return this.end_at;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public Integer last_insert_id;

				public Integer getLast_insert_id () {
					return this.last_insert_id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
					this.job_name = readString(dis);
					
			        this.parent_id = dis.readInt();
					
					this.start_at = readDate(dis);
					
					this.end_at = readDate(dis);
					
					this.status = readString(dis);
					
						this.last_insert_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.job_name,dos);
					
					// int
				
		            	dos.writeInt(this.parent_id);
					
					// java.util.Date
				
						writeDate(this.start_at,dos);
					
					// java.util.Date
				
						writeDate(this.end_at,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// Integer
				
						writeInteger(this.last_insert_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("job_name="+job_name);
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",start_at="+String.valueOf(start_at));
		sb.append(",end_at="+String.valueOf(end_at));
		sb.append(",status="+status);
		sb.append(",last_insert_id="+String.valueOf(last_insert_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public String job_name;

				public String getJob_name () {
					return this.job_name;
				}
				
			    public int parent_id;

				public int getParent_id () {
					return this.parent_id;
				}
				
			    public java.util.Date start_at;

				public java.util.Date getStart_at () {
					return this.start_at;
				}
				
			    public java.util.Date end_at;

				public java.util.Date getEnd_at () {
					return this.end_at;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
					this.job_name = readString(dis);
					
			        this.parent_id = dis.readInt();
					
					this.start_at = readDate(dis);
					
					this.end_at = readDate(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.job_name,dos);
					
					// int
				
		            	dos.writeInt(this.parent_id);
					
					// java.util.Date
				
						writeDate(this.start_at,dos);
					
					// java.util.Date
				
						writeDate(this.end_at,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("job_name="+job_name);
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",start_at="+String.valueOf(start_at));
		sb.append(",end_at="+String.valueOf(end_at));
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public String job_name;

				public String getJob_name () {
					return this.job_name;
				}
				
			    public int parent_id;

				public int getParent_id () {
					return this.parent_id;
				}
				
			    public java.util.Date start_at;

				public java.util.Date getStart_at () {
					return this.start_at;
				}
				
			    public java.util.Date end_at;

				public java.util.Date getEnd_at () {
					return this.end_at;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
					this.job_name = readString(dis);
					
			        this.parent_id = dis.readInt();
					
					this.start_at = readDate(dis);
					
					this.end_at = readDate(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.job_name,dos);
					
					// int
				
		            	dos.writeInt(this.parent_id);
					
					// java.util.Date
				
						writeDate(this.start_at,dos);
					
					// java.util.Date
				
						writeDate(this.end_at,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("job_name="+job_name);
		sb.append(",parent_id="+String.valueOf(parent_id));
		sb.append(",start_at="+String.valueOf(start_at));
		sb.append(",end_at="+String.valueOf(end_at));
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row8Struct row8 = new row8Struct();
row9Struct row9 = new row9Struct();






	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_2 = 0;
		
    	class BytesLimit65535_tJavaRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_2().limitLog4jByte();

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tDBLastInsertId_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBLastInsertId_1", false);
		start_Hash.put("tDBLastInsertId_1", System.currentTimeMillis());
		
	
	currentComponent="tDBLastInsertId_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBLastInsertId_1 = 0;
		
    	class BytesLimit65535_tDBLastInsertId_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBLastInsertId_1().limitLog4jByte();


java.sql.Connection conn_tDBLastInsertId_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
java.sql.PreparedStatement pstmt_tDBLastInsertId_1 = conn_tDBLastInsertId_1.prepareStatement("SELECT LAST_INSERT_ID()");

int nb_line_tDBLastInsertId_1 = 0;
 



/**
 * [tDBLastInsertId_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		
    	class BytesLimit65535_tDBOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBOutput_1().limitLog4jByte();






int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;

int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "jobs";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

int count_tDBOutput_1=0;
    	

				String insert_tDBOutput_1 = "INSERT INTO `" + "jobs" + "` (`job_name`,`parent_id`,`start_at`,`end_at`,`status`) VALUES (?,?,?,?,?)";
		        int batchSize_tDBOutput_1 = 1;
	   			int batchSizeCounter_tDBOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_1().limitLog4jByte();

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row1.job_name = jobName;
    	            	        	            	
    	            		row1.parent_id = context.parentId;
    	            	        	            	
    	            		row1.start_at = TalendDate.parseDate("yyyy-mm-dd HH:mm:ss", TalendDate.getDate("yyyy-mm-dd HH:mm:ss"));
    	            	        	            	
    	            		row1.end_at = null;        	            	
    	            	        	            	
    	            		row1.status = "Started";
    	            	
 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		



            row8 = null;
        whetherReject_tDBOutput_1 = false;
                            if(row1.job_name == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, row1.job_name);
}

                            pstmt_tDBOutput_1.setInt(2, row1.parent_id);

                            if(row1.start_at != null) {
date_tDBOutput_1 = row1.start_at.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(3, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.DATE);
}

                            if(row1.end_at != null) {
date_tDBOutput_1 = row1.end_at.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(4, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.DATE);
}

                            if(row1.status == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, row1.status);
}

                    pstmt_tDBOutput_1.addBatch();
                    nb_line_tDBOutput_1++;

                      batchSizeCounter_tDBOutput_1++;
            if(!whetherReject_tDBOutput_1) {
                            row8 = new row8Struct();
                                row8.job_name = row1.job_name;
                                row8.parent_id = row1.parent_id;
                                row8.start_at = row1.start_at;
                                row8.end_at = row1.end_at;
                                row8.status = row1.status;
            }
                if ( batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tDBOutput_1 = 0;
            }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tDBLastInsertId_1 main ] start
	 */

	

	
	
	currentComponent="tDBLastInsertId_1";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		

	row9.job_name = row8.job_name;
	row9.parent_id = row8.parent_id;
	row9.start_at = row8.start_at;
	row9.end_at = row8.end_at;
	row9.status = row8.status;
java.sql.ResultSet rs_tDBLastInsertId_1 = pstmt_tDBLastInsertId_1.executeQuery();
if(rs_tDBLastInsertId_1.next()){
				row9.last_insert_id = rs_tDBLastInsertId_1.getInt(1);
}
nb_line_tDBLastInsertId_1++;

 


	tos_count_tDBLastInsertId_1++;

/**
 * [tDBLastInsertId_1 main ] stop
 */
	
	/**
	 * [tDBLastInsertId_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBLastInsertId_1";

	

 



/**
 * [tDBLastInsertId_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		

    globalMap.put("lastInsertId", row9.last_insert_id);

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tDBLastInsertId_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBLastInsertId_1";

	

 



/**
 * [tDBLastInsertId_1 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



                try {
                		if (batchSizeCounter_tDBOutput_1 != 0) {
							int countSum_tDBOutput_1 = 0;
							
							for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
								countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tDBOutput_1 = 0;
    		
	

        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
			
        }


	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tDBLastInsertId_1 end ] start
	 */

	

	
	
	currentComponent="tDBLastInsertId_1";

	

pstmt_tDBLastInsertId_1.close();

globalMap.put("tDBLastInsertId_1_NB_LINE",nb_line_tDBLastInsertId_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBLastInsertId_1", true);
end_Hash.put("tDBLastInsertId_1", System.currentTimeMillis());




/**
 * [tDBLastInsertId_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	

 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tDBLastInsertId_1 finally ] start
	 */

	

	
	
	currentComponent="tDBLastInsertId_1";

	

 



/**
 * [tDBLastInsertId_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableComparableLookupRow<row17Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String state_name;

				public String getState_name () {
					return this.state_name;
				}
				
			    public String country_name;

				public String getCountry_name () {
					return this.country_name;
				}
				
			    public String state_name_lowercase;

				public String getState_name_lowercase () {
					return this.state_name_lowercase;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.state_name_lowercase == null) ? 0 : this.state_name_lowercase.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row17Struct other = (row17Struct) obj;
		
						if (this.state_name_lowercase == null) {
							if (other.state_name_lowercase != null)
								return false;
						
						} else if (!this.state_name_lowercase.equals(other.state_name_lowercase))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row17Struct other) {

		other.state_name = this.state_name;
	            other.country_name = this.country_name;
	            other.state_name_lowercase = this.state_name_lowercase;
	            
	}

	public void copyKeysDataTo(row17Struct other) {

		other.state_name_lowercase = this.state_name_lowercase;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
					this.state_name_lowercase = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.state_name_lowercase,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.state_name = readString(dis,ois);
					
						this.country_name = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.state_name, dos, oos);
					
						writeString(this.country_name, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("state_name="+state_name);
		sb.append(",country_name="+country_name);
		sb.append(",state_name_lowercase="+state_name_lowercase);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.state_name_lowercase, other.state_name_lowercase);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public String state_name;

				public String getState_name () {
					return this.state_name;
				}
				
			    public String country_name;

				public String getCountry_name () {
					return this.country_name;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
					this.state_name = readString(dis);
					
					this.country_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.state_name,dos);
					
					// String
				
						writeString(this.country_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("state_name="+state_name);
		sb.append(",country_name="+country_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();
row17Struct row17 = new row17Struct();





	
	/**
	 * [tAdvancedHash_row17 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row17", false);
		start_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row17";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row17" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row17 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row17{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row17().limitLog4jByte();

			   		// connection name:row17
			   		// source node:tJavaRow_3 - inputs:(row15) outputs:(row17,row17) | target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
			   		// linked node: tMap_1 - inputs:(row44,row17) outputs:(row4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row17Struct>getLookup(matchingModeEnum_row17);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row17 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row15" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_3 = 0;
		
    	class BytesLimit65535_tJavaRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_3().limitLog4jByte();

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
    	class BytesLimit65535_tDBInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBInput_4().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
		    calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
		        conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  `states`.`state_name`, \n  `states`.`country_name`\nFROM `states`";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row15.state_name = null;
							} else {
	                         		
        	row15.state_name = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row15.country_name = null;
							} else {
	                         		
        	row15.country_name = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
					

 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

			//row15
			//row15


			
				if(execStat){
					runStat.updateStatOnConnection("row15"+iterateId,1, 1);
				} 
			

		

    //Code generated according to input schema and output schema
row17.state_name_lowercase = StringHandling.DOWNCASE(row15.state_name);
row17.state_name = row15.state_name;
row17.country_name = row15.country_name;

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

			//row17
			//row17


			
				if(execStat){
					runStat.updateStatOnConnection("row17"+iterateId,1, 1);
				} 
			

		


			   
			   

					row17Struct row17_HashRow = new row17Struct();
		   	   	   
				
				row17_HashRow.state_name = row17.state_name;
				
				row17_HashRow.country_name = row17.country_name;
				
				row17_HashRow.state_name_lowercase = row17.state_name_lowercase;
				
			tHash_Lookup_row17.put(row17_HashRow);
			
            




 


	tos_count_tAdvancedHash_row17++;

/**
 * [tAdvancedHash_row17 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

 



/**
 * [tAdvancedHash_row17 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

 



/**
 * [tAdvancedHash_row17 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if(rs_tDBInput_4 !=null){
		rs_tDBInput_4.close();
	}
	stmt_tDBInput_4.close();
}

		   globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
		


 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row15"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

tHash_Lookup_row17.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row17"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row17", true);
end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());




/**
 * [tAdvancedHash_row17 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

 



/**
 * [tAdvancedHash_row17 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int id;

				public int getId () {
					return this.id;
				}
				
			    public java.util.Date end_at;

				public java.util.Date getEnd_at () {
					return this.end_at;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.id = this.id;
	            other.end_at = this.end_at;
	            other.status = this.status;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
			        this.id = dis.readInt();
					
					this.end_at = readDate(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.id);
					
					// java.util.Date
				
						writeDate(this.end_at,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",end_at="+String.valueOf(end_at));
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDBOutput_2 = 0;
		
    	class BytesLimit65535_tDBOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDBOutput_2().limitLog4jByte();





        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;

int rejectedCount_tDBOutput_2=0;

String tableName_tDBOutput_2 = "jobs";
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
long date_tDBOutput_2;

java.sql.Connection conn_tDBOutput_2 = null;
	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
   int batchSize_tDBOutput_2 = 10000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
    	
	    String update_tDBOutput_2 = "UPDATE `" + "jobs" + "` SET `end_at` = ?,`status` = ? WHERE `id` = ?";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";

	
		int tos_count_tFixedFlowInput_3 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_3().limitLog4jByte();

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row10.id = (Integer)globalMap.get("lastInsertId");
    	            	        	            	
    	            		row10.end_at = TalendDate.parseDate("yyyy-mm-dd HH:mm:ss", TalendDate.getDate("yyyy-mm-dd HH:mm:ss"));
    	            	        	            	
    	            		row10.status = "Finished";
    	            	
 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		



        whetherReject_tDBOutput_2 = false;
                    if(row10.end_at != null) {
date_tDBOutput_2 = row10.end_at.getTime();
if(date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
pstmt_tDBOutput_2.setString(1, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_2.setTimestamp(1, new java.sql.Timestamp(date_tDBOutput_2));
}
} else {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.DATE);
}

                    if(row10.status == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, row10.status);
}


                    pstmt_tDBOutput_2.setInt(3 + count_tDBOutput_2, row10.id);


            pstmt_tDBOutput_2.addBatch();
            nb_line_tDBOutput_2++;

              batchSizeCounter_tDBOutput_2++;
                if ( batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
                try {
                        int countSum_tDBOutput_2 = 0;
                        for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                        }
                        updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
                        batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tDBOutput_2 = 0;
                    for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                        countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                    }
                    updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
                    System.err.println(e.getMessage());
                }



                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	
    try {
    	if(pstmt_tDBOutput_2 != null){
			int countSum_tDBOutput_2 = 0;
			
			for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			
	    	
	    		updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    }
    }catch (java.sql.BatchUpdateException e){
    	
    	int countSum_tDBOutput_2 = 0;
		for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
			countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
		}
		
    	updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
    	
    	System.err.println(e.getMessage());
    	
	}

        if(pstmt_tDBOutput_2 != null) {
			
				pstmt_tDBOutput_2.close();
			
        }


	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	

 



/**
 * [tDBOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];
    static byte[] commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length) {
				if(length < 1024 && commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob.length == 0) {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[1024];
				} else {
   					commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length);
			strReturn = new String(commonByteArray_PDP_10DEC2018_issuerPushToCiamChildJob, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PDP_10DEC2018_issuerPushToCiamChildJob) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.logDirectory+ context.componentLogDirectory+"/"+TalendDate.getDate("yyyy-MM-dd")+"log.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("moment");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("root_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("father_pid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("project");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("job");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("context");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("priority");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("origin");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("message");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("code");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
    	class BytesLimit65535_tLogCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogCatcher_1().limitLog4jByte();

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row11.type = lcm.getType();
		row11.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row11.priority = lcm.getPriority();
		row11.message = lcm.getMessage();
		row11.code = lcm.getCode();
		
		row11.moment = java.util.Calendar.getInstance().getTime();
	
    	row11.pid = pid;
		row11.root_pid = rootPid;
		row11.father_pid = fatherPid;
	
    	row11.project = projectName;
    	row11.job = jobName;
    	row11.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row11.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row11.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row11.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row11.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row11.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row11.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row11.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row11.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row11.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row11.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row11.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row11.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row11.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row11.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row11.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row11.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row11.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row11.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row11.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row11.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row11.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row11.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row11.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row11.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final issuerPushToCiamChildJob issuerPushToCiamChildJobClass = new issuerPushToCiamChildJob();

        int exitCode = issuerPushToCiamChildJobClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = issuerPushToCiamChildJob.class.getClassLoader().getResourceAsStream("pdp_10dec2018/issuerpushtociamchildjob_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = issuerPushToCiamChildJob.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("parentId", "id_Integer");
				
             try{
                 context.parentId=routines.system.ParserUtils.parseTo_Integer (context.getProperty("parentId"));
             }catch(NumberFormatException e){
                 context.parentId=null;
              }
				    context.setContextType("id", "id_Integer");
				
             try{
                 context.id=routines.system.ParserUtils.parseTo_Integer (context.getProperty("id"));
             }catch(NumberFormatException e){
                 context.id=null;
              }
				    context.setContextType("source", "id_String");
				
                context.source=(String) context.getProperty("source");
				    context.setContextType("type", "id_String");
				
                context.type=(String) context.getProperty("type");
				    context.setContextType("legacy_id", "id_String");
				
                context.legacy_id=(String) context.getProperty("legacy_id");
				    context.setContextType("issuer_name", "id_String");
				
                context.issuer_name=(String) context.getProperty("issuer_name");
				    context.setContextType("issuer_type", "id_String");
				
                context.issuer_type=(String) context.getProperty("issuer_type");
				    context.setContextType("generalLogDirectory", "id_String");
				
                context.generalLogDirectory=(String) context.getProperty("generalLogDirectory");
				    context.setContextType("componentLogDirectory", "id_String");
				
                context.componentLogDirectory=(String) context.getProperty("componentLogDirectory");
				    context.setContextType("logDirectory", "id_String");
				
                context.logDirectory=(String) context.getProperty("logDirectory");
				    context.setContextType("enableLog", "id_String");
				
                context.enableLog=(String) context.getProperty("enableLog");
				    context.setContextType("ciamServerError", "id_String");
				
                context.ciamServerError=(String) context.getProperty("ciamServerError");
				    context.setContextType("failureStatus", "id_Boolean");
				
             try{
                 context.failureStatus=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("failureStatus"));
             }catch(NumberFormatException e){
                 context.failureStatus=null;
              }
				    context.setContextType("successStatus", "id_Boolean");
				
             try{
                 context.successStatus=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("successStatus"));
             }catch(NumberFormatException e){
                 context.successStatus=null;
              }
				    context.setContextType("mysql_port", "id_String");
				
                context.mysql_port=(String) context.getProperty("mysql_port");
				    context.setContextType("mysql_host", "id_String");
				
                context.mysql_host=(String) context.getProperty("mysql_host");
				    context.setContextType("mysql_user", "id_String");
				
                context.mysql_user=(String) context.getProperty("mysql_user");
				    context.setContextType("mysql_password", "id_String");
				
                context.mysql_password=(String) context.getProperty("mysql_password");
				    context.setContextType("mysql_database", "id_String");
				
                context.mysql_database=(String) context.getProperty("mysql_database");
				    context.setContextType("ciamApiSetMasterChild", "id_String");
				
                context.ciamApiSetMasterChild=(String) context.getProperty("ciamApiSetMasterChild");
				    context.setContextType("ciamApiKey", "id_String");
				
                context.ciamApiKey=(String) context.getProperty("ciamApiKey");
				    context.setContextType("ciamApiGetCityById", "id_String");
				
                context.ciamApiGetCityById=(String) context.getProperty("ciamApiGetCityById");
				    context.setContextType("ciamApiUpdateCollection", "id_String");
				
                context.ciamApiUpdateCollection=(String) context.getProperty("ciamApiUpdateCollection");
				    context.setContextType("ciamApiGetOptinServicesList", "id_String");
				
                context.ciamApiGetOptinServicesList=(String) context.getProperty("ciamApiGetOptinServicesList");
				    context.setContextType("ciamApiGetStateListByCountry", "id_String");
				
                context.ciamApiGetStateListByCountry=(String) context.getProperty("ciamApiGetStateListByCountry");
				    context.setContextType("ciamApiUploadSignature", "id_String");
				
                context.ciamApiUploadSignature=(String) context.getProperty("ciamApiUploadSignature");
				    context.setContextType("ciamApiTermCondition", "id_String");
				
                context.ciamApiTermCondition=(String) context.getProperty("ciamApiTermCondition");
				    context.setContextType("ciamApiSaveOptinService", "id_String");
				
                context.ciamApiSaveOptinService=(String) context.getProperty("ciamApiSaveOptinService");
				    context.setContextType("ciamApiLoginCustomer", "id_String");
				
                context.ciamApiLoginCustomer=(String) context.getProperty("ciamApiLoginCustomer");
				    context.setContextType("ciamApiGetCountryList", "id_String");
				
                context.ciamApiGetCountryList=(String) context.getProperty("ciamApiGetCountryList");
				    context.setContextType("ciamApisuffix", "id_String");
				
                context.ciamApisuffix=(String) context.getProperty("ciamApisuffix");
				    context.setContextType("ciamApiPushCustomer", "id_String");
				
                context.ciamApiPushCustomer=(String) context.getProperty("ciamApiPushCustomer");
				    context.setContextType("ciamApiBaseUrl", "id_String");
				
                context.ciamApiBaseUrl=(String) context.getProperty("ciamApiBaseUrl");
				    context.setContextType("ciamApiGetStateById", "id_String");
				
                context.ciamApiGetStateById=(String) context.getProperty("ciamApiGetStateById");
				    context.setContextType("ciamApiGetCustomer", "id_String");
				
                context.ciamApiGetCustomer=(String) context.getProperty("ciamApiGetCustomer");
				    context.setContextType("ciamApiGetDocument", "id_String");
				
                context.ciamApiGetDocument=(String) context.getProperty("ciamApiGetDocument");
				    context.setContextType("ciamApiSendOtp", "id_String");
				
                context.ciamApiSendOtp=(String) context.getProperty("ciamApiSendOtp");
				    context.setContextType("ciamApiGetIssuer", "id_String");
				
                context.ciamApiGetIssuer=(String) context.getProperty("ciamApiGetIssuer");
				    context.setContextType("ciamApiRegisterIssuer", "id_String");
				
                context.ciamApiRegisterIssuer=(String) context.getProperty("ciamApiRegisterIssuer");
				    context.setContextType("ciamApiRealTime", "id_String");
				
                context.ciamApiRealTime=(String) context.getProperty("ciamApiRealTime");
				    context.setContextType("ciamApiGetCityListByState", "id_String");
				
                context.ciamApiGetCityListByState=(String) context.getProperty("ciamApiGetCityListByState");
				    context.setContextType("ciamApiGetCountryById", "id_String");
				
                context.ciamApiGetCountryById=(String) context.getProperty("ciamApiGetCountryById");
				    context.setContextType("ciamApiRegisterCustomer", "id_String");
				
                context.ciamApiRegisterCustomer=(String) context.getProperty("ciamApiRegisterCustomer");
				    context.setContextType("oFacScanApiKey", "id_String");
				
                context.oFacScanApiKey=(String) context.getProperty("oFacScanApiKey");
				    context.setContextType("ciamApiVerifyOtp", "id_String");
				
                context.ciamApiVerifyOtp=(String) context.getProperty("ciamApiVerifyOtp");
				    context.setContextType("ciamApiSearchCustomer", "id_String");
				
                context.ciamApiSearchCustomer=(String) context.getProperty("ciamApiSearchCustomer");
				    context.setContextType("oFacScanUrl", "id_String");
				
                context.oFacScanUrl=(String) context.getProperty("oFacScanUrl");
				    context.setContextType("ciamApiUploadAssets", "id_String");
				
                context.ciamApiUploadAssets=(String) context.getProperty("ciamApiUploadAssets");
				    context.setContextType("ciamApiSearchCustomerOnCiam", "id_String");
				
                context.ciamApiSearchCustomerOnCiam=(String) context.getProperty("ciamApiSearchCustomerOnCiam");
				    context.setContextType("ciamApiLoadGroupADataInCiam", "id_String");
				
                context.ciamApiLoadGroupADataInCiam=(String) context.getProperty("ciamApiLoadGroupADataInCiam");
				    context.setContextType("talendBaseUrl", "id_String");
				
                context.talendBaseUrl=(String) context.getProperty("talendBaseUrl");
				    context.setContextType("dataDirectory", "id_String");
				
                context.dataDirectory=(String) context.getProperty("dataDirectory");
				    context.setContextType("inValidRequestJsonError", "id_String");
				
                context.inValidRequestJsonError=(String) context.getProperty("inValidRequestJsonError");
				    context.setContextType("inValidResponseJsonError", "id_String");
				
                context.inValidResponseJsonError=(String) context.getProperty("inValidResponseJsonError");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("parentId")) {
                context.parentId = (Integer) parentContextMap.get("parentId");
            }if (parentContextMap.containsKey("id")) {
                context.id = (Integer) parentContextMap.get("id");
            }if (parentContextMap.containsKey("source")) {
                context.source = (String) parentContextMap.get("source");
            }if (parentContextMap.containsKey("type")) {
                context.type = (String) parentContextMap.get("type");
            }if (parentContextMap.containsKey("legacy_id")) {
                context.legacy_id = (String) parentContextMap.get("legacy_id");
            }if (parentContextMap.containsKey("issuer_name")) {
                context.issuer_name = (String) parentContextMap.get("issuer_name");
            }if (parentContextMap.containsKey("issuer_type")) {
                context.issuer_type = (String) parentContextMap.get("issuer_type");
            }if (parentContextMap.containsKey("generalLogDirectory")) {
                context.generalLogDirectory = (String) parentContextMap.get("generalLogDirectory");
            }if (parentContextMap.containsKey("componentLogDirectory")) {
                context.componentLogDirectory = (String) parentContextMap.get("componentLogDirectory");
            }if (parentContextMap.containsKey("logDirectory")) {
                context.logDirectory = (String) parentContextMap.get("logDirectory");
            }if (parentContextMap.containsKey("enableLog")) {
                context.enableLog = (String) parentContextMap.get("enableLog");
            }if (parentContextMap.containsKey("ciamServerError")) {
                context.ciamServerError = (String) parentContextMap.get("ciamServerError");
            }if (parentContextMap.containsKey("failureStatus")) {
                context.failureStatus = (Boolean) parentContextMap.get("failureStatus");
            }if (parentContextMap.containsKey("successStatus")) {
                context.successStatus = (Boolean) parentContextMap.get("successStatus");
            }if (parentContextMap.containsKey("mysql_port")) {
                context.mysql_port = (String) parentContextMap.get("mysql_port");
            }if (parentContextMap.containsKey("mysql_host")) {
                context.mysql_host = (String) parentContextMap.get("mysql_host");
            }if (parentContextMap.containsKey("mysql_user")) {
                context.mysql_user = (String) parentContextMap.get("mysql_user");
            }if (parentContextMap.containsKey("mysql_password")) {
                context.mysql_password = (String) parentContextMap.get("mysql_password");
            }if (parentContextMap.containsKey("mysql_database")) {
                context.mysql_database = (String) parentContextMap.get("mysql_database");
            }if (parentContextMap.containsKey("ciamApiSetMasterChild")) {
                context.ciamApiSetMasterChild = (String) parentContextMap.get("ciamApiSetMasterChild");
            }if (parentContextMap.containsKey("ciamApiKey")) {
                context.ciamApiKey = (String) parentContextMap.get("ciamApiKey");
            }if (parentContextMap.containsKey("ciamApiGetCityById")) {
                context.ciamApiGetCityById = (String) parentContextMap.get("ciamApiGetCityById");
            }if (parentContextMap.containsKey("ciamApiUpdateCollection")) {
                context.ciamApiUpdateCollection = (String) parentContextMap.get("ciamApiUpdateCollection");
            }if (parentContextMap.containsKey("ciamApiGetOptinServicesList")) {
                context.ciamApiGetOptinServicesList = (String) parentContextMap.get("ciamApiGetOptinServicesList");
            }if (parentContextMap.containsKey("ciamApiGetStateListByCountry")) {
                context.ciamApiGetStateListByCountry = (String) parentContextMap.get("ciamApiGetStateListByCountry");
            }if (parentContextMap.containsKey("ciamApiUploadSignature")) {
                context.ciamApiUploadSignature = (String) parentContextMap.get("ciamApiUploadSignature");
            }if (parentContextMap.containsKey("ciamApiTermCondition")) {
                context.ciamApiTermCondition = (String) parentContextMap.get("ciamApiTermCondition");
            }if (parentContextMap.containsKey("ciamApiSaveOptinService")) {
                context.ciamApiSaveOptinService = (String) parentContextMap.get("ciamApiSaveOptinService");
            }if (parentContextMap.containsKey("ciamApiLoginCustomer")) {
                context.ciamApiLoginCustomer = (String) parentContextMap.get("ciamApiLoginCustomer");
            }if (parentContextMap.containsKey("ciamApiGetCountryList")) {
                context.ciamApiGetCountryList = (String) parentContextMap.get("ciamApiGetCountryList");
            }if (parentContextMap.containsKey("ciamApisuffix")) {
                context.ciamApisuffix = (String) parentContextMap.get("ciamApisuffix");
            }if (parentContextMap.containsKey("ciamApiPushCustomer")) {
                context.ciamApiPushCustomer = (String) parentContextMap.get("ciamApiPushCustomer");
            }if (parentContextMap.containsKey("ciamApiBaseUrl")) {
                context.ciamApiBaseUrl = (String) parentContextMap.get("ciamApiBaseUrl");
            }if (parentContextMap.containsKey("ciamApiGetStateById")) {
                context.ciamApiGetStateById = (String) parentContextMap.get("ciamApiGetStateById");
            }if (parentContextMap.containsKey("ciamApiGetCustomer")) {
                context.ciamApiGetCustomer = (String) parentContextMap.get("ciamApiGetCustomer");
            }if (parentContextMap.containsKey("ciamApiGetDocument")) {
                context.ciamApiGetDocument = (String) parentContextMap.get("ciamApiGetDocument");
            }if (parentContextMap.containsKey("ciamApiSendOtp")) {
                context.ciamApiSendOtp = (String) parentContextMap.get("ciamApiSendOtp");
            }if (parentContextMap.containsKey("ciamApiGetIssuer")) {
                context.ciamApiGetIssuer = (String) parentContextMap.get("ciamApiGetIssuer");
            }if (parentContextMap.containsKey("ciamApiRegisterIssuer")) {
                context.ciamApiRegisterIssuer = (String) parentContextMap.get("ciamApiRegisterIssuer");
            }if (parentContextMap.containsKey("ciamApiRealTime")) {
                context.ciamApiRealTime = (String) parentContextMap.get("ciamApiRealTime");
            }if (parentContextMap.containsKey("ciamApiGetCityListByState")) {
                context.ciamApiGetCityListByState = (String) parentContextMap.get("ciamApiGetCityListByState");
            }if (parentContextMap.containsKey("ciamApiGetCountryById")) {
                context.ciamApiGetCountryById = (String) parentContextMap.get("ciamApiGetCountryById");
            }if (parentContextMap.containsKey("ciamApiRegisterCustomer")) {
                context.ciamApiRegisterCustomer = (String) parentContextMap.get("ciamApiRegisterCustomer");
            }if (parentContextMap.containsKey("oFacScanApiKey")) {
                context.oFacScanApiKey = (String) parentContextMap.get("oFacScanApiKey");
            }if (parentContextMap.containsKey("ciamApiVerifyOtp")) {
                context.ciamApiVerifyOtp = (String) parentContextMap.get("ciamApiVerifyOtp");
            }if (parentContextMap.containsKey("ciamApiSearchCustomer")) {
                context.ciamApiSearchCustomer = (String) parentContextMap.get("ciamApiSearchCustomer");
            }if (parentContextMap.containsKey("oFacScanUrl")) {
                context.oFacScanUrl = (String) parentContextMap.get("oFacScanUrl");
            }if (parentContextMap.containsKey("ciamApiUploadAssets")) {
                context.ciamApiUploadAssets = (String) parentContextMap.get("ciamApiUploadAssets");
            }if (parentContextMap.containsKey("ciamApiSearchCustomerOnCiam")) {
                context.ciamApiSearchCustomerOnCiam = (String) parentContextMap.get("ciamApiSearchCustomerOnCiam");
            }if (parentContextMap.containsKey("ciamApiLoadGroupADataInCiam")) {
                context.ciamApiLoadGroupADataInCiam = (String) parentContextMap.get("ciamApiLoadGroupADataInCiam");
            }if (parentContextMap.containsKey("talendBaseUrl")) {
                context.talendBaseUrl = (String) parentContextMap.get("talendBaseUrl");
            }if (parentContextMap.containsKey("dataDirectory")) {
                context.dataDirectory = (String) parentContextMap.get("dataDirectory");
            }if (parentContextMap.containsKey("inValidRequestJsonError")) {
                context.inValidRequestJsonError = (String) parentContextMap.get("inValidRequestJsonError");
            }if (parentContextMap.containsKey("inValidResponseJsonError")) {
                context.inValidResponseJsonError = (String) parentContextMap.get("inValidResponseJsonError");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();



try {
errorCode = null;Implicit_Context_RegexProcess(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_Implicit_Context_Regex) {
globalMap.put("Implicit_Context_Regex_SUBPROCESS_STATE", -1);

e_Implicit_Context_Regex.printStackTrace();

}

this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : issuerPushToCiamChildJob");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     369540 characters generated by Talend Open Studio for ESB 
 *     on the 12 December, 2018 4:20:47 PM IST
 ************************************************************************************************/